<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>程序的编译、链接、预处理过程</title>
      <link href="/2022/11/08/15.cheng-xu-de-bian-yi-lian-jie-yu-yu-chu-li-guo-cheng/"/>
      <url>/2022/11/08/15.cheng-xu-de-bian-yi-lian-jie-yu-yu-chu-li-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="程序的编译、链接、预处理过程"><a href="#程序的编译、链接、预处理过程" class="headerlink" title="程序的编译、链接、预处理过程"></a><strong>程序的编译、链接、预处理过程</strong></h1><hr><h2 id="程序的翻译环境、执行环境"><a href="#程序的翻译环境、执行环境" class="headerlink" title="程序的翻译环境、执行环境"></a><strong>程序的翻译环境、执行环境</strong></h2><blockquote><p><strong>在ANSI C的任何一种实现中，存在两个不同的环境：</strong></p><ol><li><font color=red><strong>第1种是翻译环境，在这个环境中源代码被转换为可执行的机器指令</strong></font></li><li><font color=red><strong>第2种是执行环境，它用于实际执行代码</strong></font></li></ol><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103482.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103482.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220912000127253"></p></blockquote><hr><h2 id="程序的编译与链接过程"><a href="#程序的编译与链接过程" class="headerlink" title="程序的编译与链接过程"></a><strong>程序的编译与链接过程</strong></h2><blockquote><p><strong><code>翻译环境的理解：源代码被转换为可执行的机器指令的环境</code></strong></p><p><font color=red><strong>编译的四个阶段：预处理、编译、汇编、链接</strong></font></p><p><strong>预处理：宏替换、条件编译、去掉注释、展开头文件</strong></p><p><strong>编译：检查语法生成汇编代码</strong></p><p><strong>汇编：将汇编代码编译成机器码，生成目标文件</strong></p><p><strong>链接：将目标文件链接在一起，生成可执行文件</strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103165.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103165.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220912000833211"></p><ol><li><strong>预处理 选项 gcc -E test.c -o test.i 预处理完成之后就停下来，预处理之后产生的结果都放在test.i文件中</strong> </li><li><strong>编译 选项 gcc -S test.c 编译完成之后就停下来，结果保存在test.s中</strong> </li><li><strong>汇编 gcc -c test.c 汇编完成之后就停下来，结果保存在test.o中</strong></li><li><strong>链接 合并段表、符号表、重定位，形成可执行程序</strong></li></ol><p><strong>扩展：程序执行的过程</strong></p><ol><li><strong>程序必须载入内存中。在有操作系统的环境中：一般这个由操作系统完成。在独立的环境中，程序 的载入必须由手工安排，也可能是通过可执行代码置入只读内存来完成</strong></li><li><strong>程序的执行便开始。接着便调用main函数</strong></li><li><strong>开始执行程序代码。这个时候程序将使用一个运行时堆栈（stack），存储函数的局部变量和返回 地址。程序同时也可以使用静态（static）内存，存储于静态内存中的变量在程序的整个执行过程 一直保留他们的值</strong></li><li><strong>终止程序。正常终止main函数；也有可能是意外终止</strong></li></ol></blockquote><hr><h2 id="对于预处理的剖析"><a href="#对于预处理的剖析" class="headerlink" title="对于预处理的剖析"></a><strong>对于预处理的剖析</strong></h2><h3 id="3-1-预处理符号的了解"><a href="#3-1-预处理符号的了解" class="headerlink" title="3.1 预处理符号的了解"></a><strong>3.1 预处理符号的了解</strong></h3><blockquote><p><font color=red><strong>这些预定义符号都是语言内置的：</strong></font></p><p><strong>FILE    &#x2F;&#x2F;进行编译的源文件</strong> </p><p><strong>LINE   &#x2F;&#x2F;文件当前的行号</strong> </p><p><strong>DATE   &#x2F;&#x2F;文件被编译的日期</strong> </p><p><strong>TIME   &#x2F;&#x2F;文件被编译的时间</strong> </p><p><strong>STDC   &#x2F;&#x2F;如果编译器遵循ANSI C，其值为1，否则未定义</strong></p><p><strong>举例：printf(“file:%s line:%d\n”, FILE, LINE);</strong></p></blockquote><hr><h3 id="对-define的剖析"><a href="#对-define的剖析" class="headerlink" title="对#define的剖析"></a><strong>对#define的剖析</strong></h3><blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//#define原型：#define name stuff</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX</span> <span class="token expression"><span class="token number">1000</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">reg</span> <span class="token expression"><span class="token keyword">register</span>          </span><span class="token comment">//为 register这个关键字，创建一个简短的名字</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">do_forever</span> <span class="token expression"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>     </span><span class="token comment">//用更形象的符号来替换一种实现</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CASE</span> <span class="token expression"><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span>        </span><span class="token comment">//在写case语句的时候自动把 break写上</span></span><span class="token comment">// 如果定义的stuff过长，可以分成几行写，除了最后一行外，每行的后面都加一个反斜杠(续行符)</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEBUG_PRINT</span> <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"file:%s\tline:%d\t \                          date:%s\ttime:%s\n"</span><span class="token expression"><span class="token punctuation">,</span> </span><span class="token punctuation">\</span>  <span class="token expression"><span class="token constant">__FILE__</span><span class="token punctuation">,</span><span class="token constant">__LINE__</span> <span class="token punctuation">,</span>  </span><span class="token punctuation">\</span>  <span class="token expression"><span class="token constant">__DATE__</span><span class="token punctuation">,</span><span class="token constant">__TIME__</span> <span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>对于#define定义的思考：在define定义标识符的时候，要不要在最后加上 ; ？</code>—建议<code>不要加上</code>，如下例子：<code>容易出现语法错误</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">deinf</span> <span class="token expression">Max <span class="token number">100</span><span class="token punctuation">;</span></span></span><span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> max <span class="token operator">=</span> MAX<span class="token punctuation">;</span><span class="token comment">//这里替换就变成了max=100;;---有两个;会发生语法错误</span><span class="token keyword">else</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><font color=red>#define定义宏的问题：</font>#define 机制包括了一个规定，允许把参数替换到文本中，这种实现通常称为宏（macro）或定义宏（define macro）</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//正常使用宏定义</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token comment">//MAX(x,y)这是一个宏函数，后面计算最好每个参数都带上()，否则替换时可能计算顺序会改变</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a和b中最大的值是：%d\n"</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103023.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103023.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220912002607624"></p><p><strong>宏定义存在的问题：它是直接替换，没有考虑优先级和结合性问题</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">int</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> x<span class="token operator">+</span>x </span><span class="token comment">//正确写法#define int(x) ((x)+(x))</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//替换为10*2+2</span>    <span class="token comment">//我们期望得到的结果是40，但是打印结果为22</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103437.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103437.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220912002941876"></p><p><font color=red><strong>从上面的例子就可以很好的看出，宏定义存在的问题就容易导致运算顺序改变</strong></font></p><p><strong><code>#define替换的规则：直接替换过去，其他不管</code></strong></p><ol><li><font color=red><strong>在调用宏时，首先对参数进行检查，看看是否包含任何由#define定义的符号。如果是，它们首先被替换</strong></font> </li><li><font color=red><strong>替换文本随后被插入到程序中原来文本的位置。对于宏，参数名被他们的值所替换</strong></font>  </li><li><font color=red><strong>最后，再次对结果文件进行扫描，看看它是否包含任何由#define定义的符号。如果是，就重复上述处理过程</strong></font></li></ol></blockquote><hr><h3 id="和-的了解"><a href="#和-的了解" class="headerlink" title="#和##的了解"></a><strong>#和##的了解</strong></h3><blockquote><p><strong>案例思考：如何把参数插入到字符串中？</strong></p><ol><li><font color=red><strong>使用 # ，把一个宏参数变成对应的字符串</strong></font></li><li><font color=red><strong>使用##，可以把位于它两边的符号合成一个符号</strong></font></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//#的使用</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PRINT</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"the value of "</span><span class="token directive-hash">#</span><span class="token directive keyword">n</span><span class="token string">" is %d\n"</span><span class="token expression"><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token comment">//这个#n就是把参数n变成一个字符串，比如传入a，就替换成"a"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">PRINT</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">PRINT</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103855.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103855.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220912004335773"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//##的使用</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">CAT</span><span class="token expression"><span class="token punctuation">(</span>name1<span class="token punctuation">,</span>name2<span class="token punctuation">)</span> name1</span><span class="token punctuation">##</span><span class="token expression">name2</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> Class100 <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Class100=%d\n"</span><span class="token punctuation">,</span> <span class="token function">CAT</span><span class="token punctuation">(</span>Class<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//CAT(Class,100)就是把两边符号合成一个符号，即Class100</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103064.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103064.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220912004925236"></p></blockquote><hr><h3 id="带副作用的宏参数"><a href="#带副作用的宏参数" class="headerlink" title="带副作用的宏参数"></a><strong>带副作用的宏参数</strong></h3><blockquote><p><font color=red><strong>当宏参数在宏的定义中出现超过一次的时候，如果参数带有副作用(自加自减等)，那么你在使用这个宏的时候就可能出现危险，导致不可预测的后果。副作用就是表达式求值的时候出现的永久性效果</strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//不带副作用</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//带有副作用</span><span class="token comment">//MAX宏可以证明具有副作用的参数所引起的问题</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>x<span class="token operator">++</span><span class="token punctuation">,</span> y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x=%d y=%d z=%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出的结果是:x=6 y=10 z=9  </span>    <span class="token comment">//解释：宏替换进入#define为：(x++)>(y++)?(x++):(y++)，因为执行x++，y++，得：x=6，y=9，因为y更大，则得z=9，然后y++，y为10</span>    <span class="token comment">//最终a=6，y=10,z=9</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103251.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103251.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220912005906140"></p></blockquote><hr><h3 id="宏和函数的对比"><a href="#宏和函数的对比" class="headerlink" title="宏和函数的对比"></a><strong>宏和函数的对比</strong></h3><blockquote><table><thead><tr><th align="center"><strong>属性</strong></th><th><strong>#define定义宏</strong></th><th><strong>函数</strong></th></tr></thead><tbody><tr><td align="center"><strong>代码长度</strong></td><td><strong>每次使用时，宏代码都会被插入到程序中。除了非常 小的宏之外，程序的长度会大幅度增长</strong></td><td><strong>函数代码只出现于一个地方；每 次使用这个函数时，都调用那个 地方的同一份代码</strong></td></tr><tr><td align="center"><strong>执行速度</strong></td><td><strong>更快</strong></td><td><strong>存在函数的调用和返回的额外开 销，所以相对慢一些</strong></td></tr><tr><td align="center"><strong>操 作 符 优 先 级</strong></td><td><strong>宏参数的求值是在所有周围表达式的上下文环境里， 除非加上括号，否则邻近操作符的优先级可能会产生 不可预料的后果，所以建议宏在书写的时候多些括号</strong></td><td><strong>函数参数只在函数调用的时候求 值一次，它的结果值传递给函 数。表达式的求值结果更容易预测</strong></td></tr><tr><td align="center"><strong>带 有 副 作 用 的 参 数</strong></td><td><strong>参数可能被替换到宏体中的多个位置，所以带有副作 用的参数求值可能会产生不可预料的结果</strong></td><td><strong>函数参数只在传参的时候求值一 次，结果更容易控制</strong></td></tr><tr><td align="center"><strong>参 数 类 型</strong></td><td><strong>宏的参数与类型无关，只要对参数的操作是合法的， 它就可以使用于任何参数类型</strong></td><td><strong>函数的参数是与类型有关的，如 果参数的类型不同，就需要不同 的函数，即使他们执行的任务是 不同的</strong></td></tr><tr><td align="center"><strong>调 试</strong></td><td><strong>宏是不方便调试的</strong></td><td><strong>函数是可以逐语句调试的</strong></td></tr><tr><td align="center"><strong>递 归</strong></td><td><strong>宏是不能递归的</strong></td><td><strong>函数是可以递归的</strong></td></tr></tbody></table><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">int</span> <span class="token function">get_max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//使用宏---直接替换运算，比较快</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印5</span><span class="token comment">//使用函数---经过：函数调用+逻辑运算+函数返回，速度慢</span><span class="token keyword">int</span> mm <span class="token operator">=</span> <span class="token function">get_max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> mm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印5</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：<code>宏用于简单运算</code>—<code>函数用于复杂的运算</code>—主要还是用函数，宏容易错误</strong></p><p><font color=red><strong>命名约定：宏名称全部用大写—函数名全部用小写</strong></font></p><p><font color=red><strong>宏移除方法：#undef NAME—如果现存的一个名字需要被重新定义，那么它的旧名字首先要被移除</strong></font></p></blockquote><hr><h3 id="预处理中的条件编译"><a href="#预处理中的条件编译" class="headerlink" title="预处理中的条件编译"></a><strong>预处理中的条件编译</strong></h3><blockquote><p><font color=green><strong>在编译一个程序的时候我们如果要将一条语句（一组语句）编译或者放弃是很方便的。因为我们有条件编译指令</strong></font></p><p><strong>比如说：调试性的代码，删除可惜，保留又碍事，所以我们可以选择性的编译</strong></p><p><strong><font color=red>条件编译常见：单分支条件编译、多分支条件编译、判定是否被定义、嵌套条件编译</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//单分支条件编译</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//条件编译,预处理阶段执行</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">1</span></span><span class="token comment">//条件编译开始，满足条件为0就执行</span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span><span class="token comment">//条件编译结束</span></span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103837.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103837.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220912012408506"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//多分支条件编译</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">M<span class="token operator">&lt;</span><span class="token number">100</span></span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"M&lt;100\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">M<span class="token operator">==</span><span class="token number">100</span></span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"M=100\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"M>100\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103606.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103606.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220912012616595"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//判断是否被定义</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span></span><span class="token comment">//反面#if !defined(M)</span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"M存在\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">M</span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"M存在\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103515.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103515.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220912013243653"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//嵌套条件编译</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">20</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span></span></span>   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">N</span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"M和N都存在\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span>defined N</span></span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"M存在，N不存在\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103766.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122103766.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220912013901567"></p></blockquote><hr><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a><strong>文件包含</strong></h2><blockquote><p><strong><code>库文件包含：#include&lt;filename.h&gt;</code>—库里的头文件</strong> </p><p><strong><code>本地文件包含：#include &quot;filename&quot;</code>—自己写的头文件</strong></p><p><strong>VS环境的标准头文件的路径：C:\Program Files (x86)\Microsoft Visual Studio\VC\include</strong></p><p><strong>Linux环境的标准头文件的路径：&#x2F;usr&#x2F;include</strong></p><p><strong><code>文件包含防止重复包含的方法：旧编译器使用条件编译来处理---新编译器使用#pragma once来处理</code></strong></p><p><strong>举例：</strong></p><ol><li><strong>comm.h和comm.c是公共模块</strong></li><li><strong>test1.h和test1.c使用了公共模块</strong></li><li><strong>test2.h和test2.c使用了公共模块</strong></li><li><strong>test.h和test.c使用了test1模块和test2模块</strong></li><li><strong>这样最终程序中就会出现两份comm.h的内容。这样就造成了文件内容的重复</strong></li></ol><p><strong><font color=red>这种情况我们就可以使用条件编译或者#pragma once来处理这个问题</font></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122104979.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122104979.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220912014439307"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件操作</title>
      <link href="/2022/11/08/14.wen-jian-cao-zuo/"/>
      <url>/2022/11/08/14.wen-jian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a><strong>文件操作</strong></h1><hr><h2 id="使用文件的原因"><a href="#使用文件的原因" class="headerlink" title="使用文件的原因"></a><strong>使用文件的原因</strong></h2><blockquote><p><strong><font color=green>当我们写一个程序进行基本的增删查改的时候，需要保存文件在本地，而不是让其变成单次执行程序的结果，因此我们需要使用文件来存储我们的数据</font></strong></p><p><strong><font color=green>使用文件保存数据对于计算机而言是非常重要的一部，可以说任何功能的实现，都离不开在文件里保存数据</font></strong></p></blockquote><hr><h2 id="对于文件的理解"><a href="#对于文件的理解" class="headerlink" title="对于文件的理解"></a><strong>对于文件的理解</strong></h2><blockquote><p><font color=red><strong>我们一般谈的文件有两种：程序文件、数据文件（从文件功能的角度来分类的）</strong></font></p><p><strong><code>程序文件</code>：包括源程序文件（后缀为.c）,目标文件（windows环境后缀为.obj）,可执行程序（windows环境后缀为.exe Linux环境为a.out）</strong></p><p><strong><code>数据文件</code>：程序运行时读写的数据，比如程序运行需要从中读取数据的文件， 或者输出内容的文件</strong></p><p><strong><code>文件名：文件名包含3部分：文件路径+文件名主干+文件后缀</code></strong></p><p><strong>例如： <code>c:\code\test.txt</code>—一个文件要有一个唯一的文件标识，以便用户识别和引用—为了方便起见，文件标识常被称为文件名</strong></p></blockquote><hr><h2 id="文件的打开与关闭"><a href="#文件的打开与关闭" class="headerlink" title="文件的打开与关闭"></a><strong>文件的打开与关闭</strong></h2><blockquote><p><strong>首先我们要明白文件通过什么来操作？—这里引出了<code>文件指针概念</code></strong>—缓冲文件系统中，关键的概念是“文件类型指针”，简称“文件指针”</p><p><strong><code>文件类型FILE：</code>每个被使用的文件都在内存中开辟了一个相应的文件信息区，用来存放文件的相关信息（如文件的名字，文件状态及文件当前的位置等）。这些信息是保存在一个结构体变量中的。该结构体类型是由系统声明的，取名FILE</strong></p><p><strong><font color=red>stdio.h头文件中文件类型的声明：</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//文件类型声明</span><span class="token keyword">struct</span> <span class="token class-name">_iobuf</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>_ptr<span class="token punctuation">;</span>        <span class="token keyword">int</span>   _cnt<span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>_base<span class="token punctuation">;</span>        <span class="token keyword">int</span>   _flag<span class="token punctuation">;</span>        <span class="token keyword">int</span>   _file<span class="token punctuation">;</span>        <span class="token keyword">int</span>   _charbuf<span class="token punctuation">;</span>        <span class="token keyword">int</span>   _bufsiz<span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>_tmpfname<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_iobuf</span> FILE<span class="token punctuation">;</span><span class="token comment">//使用</span>FILE<span class="token operator">*</span> pf<span class="token punctuation">;</span><span class="token comment">//文件指针变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><font color=red>定义pf是一个指向FILE类型数据的指针变量。可以使pf指向某个文件的文件信息区（是一个结构体变量）。通过该文件信息区中的信息就能够访问该文件。也就是说，通过文件指针变量能够找到与它关联的文件，如下图：</font></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102398.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102398.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911205442841"></p><p><strong><code>文件的打开与关闭函数原型：</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//打开文件</span>FILE <span class="token operator">*</span> <span class="token function">fopen</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> mode <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span><span class="token keyword">int</span> <span class="token function">fclose</span> <span class="token punctuation">(</span> FILE <span class="token operator">*</span> stream <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>文件的打开方式总结：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102322.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102322.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911205827610"></p><p><font color=red><strong>总结：r+具有读写属性，从文件头开始写，保留原文件中没有被覆盖的内容—w+也具有读写属性，写的时候如果文件存在，会被清空，从头开始写</strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打开文件夹失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打开文件夹成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读文件操作</span><span class="token comment">//关闭文件</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102559.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102559.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911210324399"></p></blockquote><hr><h2 id="文件的顺序读写与随机读写"><a href="#文件的顺序读写与随机读写" class="headerlink" title="文件的顺序读写与随机读写"></a><strong>文件的顺序读写与随机读写</strong></h2><blockquote><p><strong><code>顺序读写，即挨着顺序对文件中的数据进行输入或输出</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102496.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102496.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911211105104"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102076.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102076.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911210817100"></p><p><strong><code>fgetc</code>：顺序读取文件中的一个字符—<font color=green>一个一个的读，调用一次往后挪动一位</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件打开失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件打开成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//读文件---test.txt 写入信息abcdef</span><span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//c</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//d</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//e</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//f</span>ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取全部内容</span><span class="token comment">/*int ch2 = 0;while ((ch2 = fgetc(pf) != EOF))//EOF是文件末尾的意思：End Of File&#123;printf("%c", ch);//输出abcdef&#125;*/</span><span class="token comment">//关闭文件</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102921.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102921.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911220658488"></p><p><strong><code>fputc：顺序写入一个字符内容进入文件</code></strong>—<strong><code>fputs：顺序写入字符串内容进入文件</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102799.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102799.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911222800515"></p><p><strong><code>fgets：读取文件里的字符串</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102412.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102412.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911222937498"></p><p><strong><code>fprintf：格式化输出</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102656.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102656.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911223059261"></p><p><strong><code>fscanf：格式化输入</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102053.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102053.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911223301737"></p><p><strong><code>fread：二进制输入</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102417.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102417.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911223422641"></p><p><strong><code>fwrite：二进制输出</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打开文件</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pf <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//文件打开失败，失败返回</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcde"</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span><span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color=red><strong>扩展：scanf&#x2F;fscanf&#x2F;sscanf—printf&#x2F;fprintf&#x2F;sprintf的区别</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102201.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102201.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911224108401"></p><hr><p><strong><code>随机读取：即随机对文件中的数据进行输入或输出</code></strong></p><p><strong><font color=red>文件的随机读取函数分为：fseek、ftell、rewind</font></strong></p><p><strong><code>fseek：根据文件指针的位置和偏移量来定位文件指针--原型：int fseek ( FILE * stream, long int offset, int origin );</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* fseek example */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      FILE <span class="token operator">*</span> pFile<span class="token punctuation">;</span>      pFile <span class="token operator">=</span> <span class="token function">fopen</span> <span class="token punctuation">(</span> <span class="token string">"example.txt"</span> <span class="token punctuation">,</span> <span class="token string">"wb"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fputs</span> <span class="token punctuation">(</span> <span class="token string">"This is an apple."</span> <span class="token punctuation">,</span> pFile <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存放字符串于文件中</span>      <span class="token function">fseek</span> <span class="token punctuation">(</span> pFile <span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从文件中第9个位置开始读取</span>      <span class="token function">fputs</span> <span class="token punctuation">(</span> <span class="token string">" sam"</span> <span class="token punctuation">,</span> pFile <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fclose</span> <span class="token punctuation">(</span> pFile <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>ftell：返回文件指针相对于起始位置的偏移量---原型：long int ftell ( FILE * stream );</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* ftell example : getting size of a file */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  FILE <span class="token operator">*</span> pFile<span class="token punctuation">;</span>  <span class="token keyword">long</span> size<span class="token punctuation">;</span>  pFile <span class="token operator">=</span> <span class="token function">fopen</span> <span class="token punctuation">(</span><span class="token string">"myfile.txt"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pFile<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token function">perror</span> <span class="token punctuation">(</span><span class="token string">"Error opening file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">fseek</span> <span class="token punctuation">(</span>pFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// non-portable</span>    size<span class="token operator">=</span><span class="token function">ftell</span> <span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span> <span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"Size of myfile.txt: %ld bytes.\n"</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>rewind：让文件指针的位置回到文件的起始位置---原型：void rewind ( FILE * stream );</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* rewind example */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> n<span class="token punctuation">;</span>      FILE <span class="token operator">*</span> pFile<span class="token punctuation">;</span>      <span class="token keyword">char</span> buffer <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      pFile <span class="token operator">=</span> <span class="token function">fopen</span> <span class="token punctuation">(</span><span class="token string">"myfile.txt"</span><span class="token punctuation">,</span><span class="token string">"w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> n<span class="token operator">=</span><span class="token char">'A'</span> <span class="token punctuation">;</span> n<span class="token operator">&lt;=</span><span class="token char">'Z'</span> <span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">fputc</span> <span class="token punctuation">(</span> n<span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">rewind</span> <span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fread</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fclose</span> <span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>      buffer<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'\0'</span><span class="token punctuation">;</span>      <span class="token function">puts</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h2 id="文本文件和二进制文件"><a href="#文本文件和二进制文件" class="headerlink" title="文本文件和二进制文件"></a><strong>文本文件和二进制文件</strong></h2><blockquote><p><strong>根据数据的组织形式，<code>数据文件</code>被<code>称为文本文件或者二进制文件</code></strong></p><p><font color=red><strong>数据在内存中以二进制的形式存储，如果不加转换的输出到外存，就是二进制文件</strong></font></p><p><font color=red><strong>如果要求在外存上以ASCII码的形式存储，则需要在存储前转换。以ASCII字符的形式存储的文件就是文本文件</strong></font></p><p><strong><font color=green>一个数据在内存中是怎么存储的呢？</font>—<code>ASCII字符存储，数值类型ASCII或二进制</code></strong></p><p><strong>字符一律以ASCII形式存储，数值型数据既可以用ASCII形式存储，也可以使用二进制形式存储</strong></p><p><strong>如有整数10000，如果以ASCII码的形式输出到磁盘，则磁盘中占用5个字节（每个字符一个字节），而 二进制形式输出，则在磁盘上只占4个字节</strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102490.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102490.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911230458718"></p></blockquote><hr><h2 id="文本读取结束的判定"><a href="#文本读取结束的判定" class="headerlink" title="文本读取结束的判定"></a><strong>文本读取结束的判定</strong></h2><blockquote><p><strong>对于文本读取结束判断的易错理解：feof函数</strong>—在文件读取过程中，不能用feof函数的返回值直接用来判断文件的是否结束</p><p><strong><code>feof函数</code>：应用于当文件读取结束的时候，判断是读取失败结束，还是遇到文件尾结束</strong></p><p><strong><code>文本读取结束判定返回值：</code></strong></p><ol><li><font color=red><strong>文本文件读取是否结束：判断返回值是否为 EOF （ fgetc ）或者 NULL （ fgets ）</strong></font></li><li><font color=red><strong>二进制文件的读取结束判断：判断返回值是否小于实际要读的个数</strong></font></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//文本文件实例：</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span> <span class="token comment">// 注意：int，非char，要求处理EOF</span>    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"File opening failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EXIT_FAILURE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">//fgetc 当读取失败的时候或者遇到文件结束的时候，都会返回EOF</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token comment">// 标准C I/O读取文件循环</span>    <span class="token punctuation">&#123;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//判断是什么原因结束的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ferror</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"I/O error when reading"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"End of file reached successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//二进制文件实例：</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> SIZE <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> a<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1.</span><span class="token punctuation">,</span><span class="token number">2.</span><span class="token punctuation">,</span><span class="token number">3.</span><span class="token punctuation">,</span><span class="token number">4.</span><span class="token punctuation">,</span><span class="token number">5.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.bin"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须用二进制模式</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写 double 的数组</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> b<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.bin"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> ret_code <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> SIZE<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读 double 的数组</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret_code <span class="token operator">==</span> SIZE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Array read successfully, contents: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>n<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// error handling</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error reading test.bin: unexpected end of file\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ferror</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Error reading test.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h2 id="理解文件缓冲区"><a href="#理解文件缓冲区" class="headerlink" title="理解文件缓冲区"></a><strong>理解文件缓冲区</strong></h2><blockquote><p><font color=red><strong>ANSIC 标准采用“缓冲文件系统”处理的数据文件的，所谓缓冲文件系统是指系统自动地在内存中为程序中每一个正在使用的文件开辟一块“文件缓冲区”。从内存向磁盘输出数据会先送到内存中的缓冲区，装满缓冲区后才一起送到磁盘上。如果从磁盘向计算机读入数据，则从磁盘文件中读取数据输入到内存缓冲区（充满缓冲区），然后再从缓冲区逐个地将数据送到程序数据区（程序变量等）。缓冲区的大小根据C编译系统决定的</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102785.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122102785.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911231503847"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     FILE<span class="token operator">*</span>pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先将代码放在输出缓冲区</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"睡眠10秒-已经写数据了，打开test.txt文件，发现文件没有内容\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"刷新缓冲区\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">fflush</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新缓冲区时，才将输出缓冲区的数据写到文件（磁盘）</span>     <span class="token comment">//注：fflush 在高版本的VS上不能使用了</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"再睡眠10秒-此时，再次打开test.txt文件，文件有内容了\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//注：fclose在关闭文件的时候，也会刷新缓冲区</span>     pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里可以得出一个结论： 因为有缓冲区的存在，C语言在操作文件的时候，需要做刷新缓冲区或者在文件操作结束的时候关闭文件。 如果不做，可能导致读写文件的问题</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态内存管理</title>
      <link href="/2022/11/08/13.dong-tai-nei-cun-guan-li/"/>
      <url>/2022/11/08/13.dong-tai-nei-cun-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="动态内存管理"><a href="#动态内存管理" class="headerlink" title="动态内存管理"></a><strong>动态内存管理</strong></h1><hr><h2 id="采用动态内存分配的原因"><a href="#采用动态内存分配的原因" class="headerlink" title="采用动态内存分配的原因"></a><strong>采用动态内存分配的原因</strong></h2><blockquote><p><strong>以前进行内存开辟的方法：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//在栈空间上开辟4个字节</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//在栈空间上开辟10个字节的连续空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>上述的开辟空间的方式有两个特点：</strong></p><ol><li><strong>空间开辟大小是固定的</strong></li><li><strong>数组在声明的时候，必须指定数组的长度，它所需要的内存在编译时分配</strong></li></ol><p><font color=red><strong>对于空间的需求，不仅仅是上述的情况。有时候我们需要的空间大小在程序运行的时候才能知道， 那数组在编译时开辟空间的方式就不能满足了。 这时候就只能试试动态内存开辟了</strong></font></p></blockquote><hr><h2 id="动态内存函数—malloc、free、calloc、realloc"><a href="#动态内存函数—malloc、free、calloc、realloc" class="headerlink" title="动态内存函数—malloc、free、calloc、realloc"></a><strong>动态内存函数—malloc、free、calloc、realloc</strong></h2><blockquote><p><strong><code>①malloc函数：向内存申请一块连续可用的空间，并返回指向这块空间的指针---原型:void* malloc (size_t size);</code></strong></p><p><strong><font color=green>malloc的理解：动态的分配size个长度的连续内存空间，开辟成功返回指针，失败返回NULL</font></strong></p><p><font color=red><strong>1.如果开辟成功，则返回一个指向开辟好空间的指针</strong></font></p><p><font color=red><strong>2.如果开辟失败，则返回一个NULL指针，因此malloc的返回值一定要做检查</strong></font></p><p><font color=red><strong>3.返回值的类型是 <code>void* </code>，所以malloc函数并不知道开辟空间的类型，具体在使用的时候使用者自己 来决定</strong></font></p><p><font color=red><strong>4.返回值的类型是 <code>void*</code> ，所以malloc函数并不知道开辟空间的类型，具体在使用的时候使用者自己 来决定</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101737.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101737.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911101003180"></p><p><strong><code>②free函数：用来释放动态开辟的内存---原型：void free (void* ptr);</code></strong></p><p><strong>free的理解：释放指针指向的动态开辟内存，没有释放指针</strong></p><p><font color=red><strong>1.如果参数 ptr 指向的空间不是动态开辟的，那free函数的行为是未定义的</strong></font></p><p><font color=red><strong>2.如果参数 ptr 是NULL指针，则函数什么事都不做</strong></font></p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101490.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101490.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911101105058" style="zoom:80%;" /><p><strong><code>核心问题：为什么free指针后一定要置NULL?</code></strong></p><p><font color=red><strong>释放的是指针指向的内存，指针并没有释放，只有程序结束才会销毁指针变量，释放free内存后，指针还指向这块内存，但里面的内容变了，成为了垃圾信息，因此需要在释放指针后将指针置NULL，否则使用指针就是使用野指针</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101399.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101399.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911094726490"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span><span class="token comment">//动态内存开辟函数的头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;errno.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"错误信息内容：%s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//strerror string.h里，errno errno.h里</span>        <span class="token comment">//strerror函数将errnum（它通常就说errno值）映射为一个出错信息字符串，并返回此字符串的指针</span>        <span class="token comment">//errno是全局变量，存放错误码编号</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"动态内存开辟成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只释放p指针下的内存空间内容，不释放p指针</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//必须置为NULL，否则下次使用p指针就是使用野指针</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>③calloc函数：calloc 函数也用来动态内存分配---原型：void* calloc (size_t num, size_t size);</code></strong></p><p><strong>calloc的理解：动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0</strong></p><p><font color=red><strong>1.函数的功能是为 num 个大小为 size 的元素开辟一块空间，并且把空间的每个字节初始化为0</strong></font></p><p><font color=red><strong>2.与函数 malloc 的区别只在于 calloc 会在返回地址之前把申请的空间的每个字节初始化为全0</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101081.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101081.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911101550563"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//使用空间</span>  <span class="token punctuation">&#125;</span> <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>④realloc函数：调整动态内存空间大小—原型：<code>void* realloc (void* ptr，size_t size);</code></strong></p><p><strong>realloc的理解：会对内存的大小做灵活的调整</strong></p><p><font color=red><strong>1.ptr 是要调整的内存地址，size 调整之后新大小</strong></font></p><p><font color=red><strong>2.返回值为调整之后的内存起始位置</strong></font></p><p><font color=red><strong>3.这个函数调整原内存空间大小的基础上，还会将原来内存中的数据移动到新的空间</strong></font></p><p><font color=green><strong>realloc在调整空间存在两种情况：</strong></font></p><ol><li><strong>情况一：原来空间之后有足够大的空间或者缩小空间—返回原内存空间地址</strong></li><li><strong>情况二：原来空间之后没有足够大的空间—返回新内存空间地址</strong></li></ol><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101494.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101494.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911103440046"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101184.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101184.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911103936511"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//业务处理</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token comment">//扩展容量</span> <span class="token comment">//代码1</span> ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//代码2</span> <span class="token keyword">int</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> p <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ptr <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">//业务处理</span> <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h2 id="常见动态内存错误"><a href="#常见动态内存错误" class="headerlink" title="常见动态内存错误"></a><strong>常见动态内存错误</strong></h2><blockquote><p><strong><code>常见的动态内存错误分为：</code></strong></p><ol><li><font color=red><strong>对NULL指针的解引用操作</strong></font></li><li><font color=red><strong>对动态开辟空间的越界访问</strong></font></li><li><font color=red><strong>对非动态开辟内存使用free释放</strong></font></li><li><font color=red><strong>使用free释放一块动态开辟内存的一部分</strong></font></li><li><font color=red><strong>对同一块动态内存多次释放</strong></font></li><li><font color=red><strong>动态开辟内存忘记释放（内存泄漏</strong></font></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">1.</span>错误：对<span class="token constant">NULL</span>指针的解引用操作<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>INT_MAX<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//如果p的值是NULL，就会有问题</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">2.</span>错误：对动态开辟空间的越界访问<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> p<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>     <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>     <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//当i是10的时候越界访问</span>     <span class="token punctuation">&#125;</span>     <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">3.</span>错误：对非动态开辟内存使用free释放<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>     <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span><span class="token punctuation">&#125;</span>    <span class="token number">4.</span>使用free释放一块动态开辟内存的一部分<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     p<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p不再指向动态内存的起始位置</span><span class="token punctuation">&#125;</span><span class="token number">5.</span>对同一块动态内存多次释放<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重复释放</span><span class="token punctuation">&#125;</span><span class="token number">6.</span>动态开辟内存忘记释放<span class="token punctuation">(</span>内存泄漏<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//动态开辟的空间一定要释放，并且正确释放</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义类型</title>
      <link href="/2022/11/08/12.zi-ding-yi-lei-xing/"/>
      <url>/2022/11/08/12.zi-ding-yi-lei-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a><strong>自定义类型</strong></h1><p><font color=green><strong>类型分类：内置类型(char shot int long double…)     自定义类型(结构体 枚举 联合体)</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100135.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100135.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910095805092"></p><hr><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a><strong>结构体</strong></h2><h3 id="结构体类型的声明"><a href="#结构体类型的声明" class="headerlink" title="结构体类型的声明"></a><strong>结构体类型的声明</strong></h3><blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token comment">//Stu是这个结构体的名字，struct Stu是结构体类型</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//名字</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//年龄</span><span class="token keyword">char</span> sex<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//性别</span><span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//学号</span><span class="token punctuation">&#125;</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span>s3<span class="token punctuation">;</span> <span class="token comment">//分号不能丢---这里的s1 s2 s3是创建的结构体全局变量---如果typedef重命名就是结构体替代名称，用来代替这个结构体类型</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//s1是局部结构体变量</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> s1<span class="token punctuation">;</span><span class="token comment">//struct Stu才是类型，直接用Stu s1;是错误的</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100774.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100774.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910100306088"></p><p><font color=green><strong><u>重点注意：struct Stu是结构体类型，Stu只是结构体名字</u></strong></font></p><p><font color=red><strong>特殊：匿名结构体类型的声明</strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//匿名结构体类型---不给结构体命名,但是要创建一个全局变量，不然用不了这个匿名结构体</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">double</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stu<span class="token punctuation">;</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">double</span> d<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//这里的p是结构体指针，放的是上面这个结构体的地址</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>stu<span class="token punctuation">;</span><span class="token comment">//这里有可能报错类型不兼容</span>    <span class="token comment">//有些编译器没有优化，编译器会把上面的两个声明当成完全不同的两个类型</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h3 id="结构体的自引用"><a href="#结构体的自引用" class="headerlink" title="结构体的自引用"></a><strong>结构体的自引用</strong></h3><blockquote><p><strong><font color=red>错误实例：</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> data<span class="token punctuation">;</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span><span class="token comment">//严重错误，你创建后就找不到这个next的内存位置</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><font color=red>正确实例：</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> data<span class="token punctuation">;</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token comment">//使用指针指向struct Node类型可以找到next的内存位置</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><font color=red>typedef命名结构体问题：typedef喜欢用就用</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//错误写法</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> data<span class="token punctuation">;</span> Node<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token comment">//这样写会报错未标识的Node</span><span class="token punctuation">&#125;</span>Node<span class="token punctuation">;</span>原因解释：<span class="token keyword">typedef</span>对<span class="token keyword">struct</span>进行重命名的时候，它必须是清晰可见的，必须带上结构体名字，但是Node还是通过<span class="token keyword">struct</span>创建出来的，然后才用<span class="token keyword">typedef</span>去重命名，因此可以理解为：Node是全局变量，不是重命名的名字<span class="token comment">//正确写法</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token comment">//清晰的结构体名字</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> data<span class="token punctuation">;</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node<span class="token punctuation">;</span><span class="token comment">//重命名的结构体名称</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Node n<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//Node代替的是结构体类型struct Node</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h3 id="结构体变量的定义和初始化"><a href="#结构体变量的定义和初始化" class="headerlink" title="结构体变量的定义和初始化"></a><strong>结构体变量的定义和初始化</strong></h3><blockquote><p><strong>结构体里有啥就初始化啥，定义与一般类型一样的方式</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Point</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>p1<span class="token punctuation">;</span> <span class="token comment">//声明类型的同时定义变量p1</span><span class="token keyword">struct</span> <span class="token class-name">Point</span> p2<span class="token punctuation">;</span> <span class="token comment">//定义结构体变量p2</span><span class="token keyword">struct</span> <span class="token class-name">Point</span> p3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//初始化：定义变量的同时赋初值。</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span>        <span class="token comment">//类型声明</span><span class="token punctuation">&#123;</span> <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//名字</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token comment">//年龄</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//初始化</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> data<span class="token punctuation">;</span> <span class="token keyword">struct</span> <span class="token class-name">Point</span> p<span class="token punctuation">;</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>n1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//结构体嵌套初始化</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> n2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//结构体嵌套初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h3 id="结构体的内存对齐"><a href="#结构体的内存对齐" class="headerlink" title="结构体的内存对齐"></a><strong>结构体的内存对齐</strong></h3><blockquote><p><strong>面试问C语言，这个基本都要问，很核心的知识</strong></p><p><strong><code>先看一个现象：</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stddef.h></span><span class="token comment">//offsetof函数头文件</span></span><span class="token keyword">struct</span> <span class="token class-name">s1</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> c1<span class="token punctuation">;</span><span class="token comment">//1字节</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//4字节</span><span class="token keyword">char</span> c2<span class="token punctuation">;</span><span class="token comment">//1字节</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印出来结构体大小为12，与结构体类型总大小不一样，为什么？</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"结构体struct s1的大小：%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">s1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//offsetof函数，能自动返回结构对象中，某变量距离结构体对象首地址的偏移值</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"结构体struct中c1变量的偏移量：%d\n"</span><span class="token punctuation">,</span> <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">s1</span><span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"结构体struct中i变量的偏移量：%d\n"</span><span class="token punctuation">,</span> <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">s1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"结构体struct中c2变量的偏移量：%d\n"</span><span class="token punctuation">,</span> <span class="token function">offsetof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">s1</span><span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100011.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100011.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910104440788"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100996.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100996.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910105027178"></p><p><strong><code>从上图就可以很直观的看到，再内存中有些地址它是跳过了，并没有挨着存储，这里也就引出了结构体内存对齐规则！</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100041.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100041.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910105425687"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100426.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100426.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910105706910"></p><p><font color=green><strong>易错理解解读：</strong></font></p><ol><li><strong><font color=red>这里所说的偏移量是相比于当前地址位开始的，对齐数是针对不同变量来的，比如char c1的对齐数是1，那么对于c1变量来说，它以后的成员存放都是相差1地址，但是对于int i对齐数为4来说，它就要相差4地址才能存放一个成员，如图就可以看到，先存放c1的成员占据了地址0，然后存放i的成员（深红色部分），所以往后偏移4个地址，到了地址为4的地方才存放(黄色部分)</font></strong></li><li><strong><font color=blue>当都存放完成后，要考虑结构体总大小问题，总大小&#x3D;最大对齐数的整数倍，这里发现总大小大于了实际我们存储的内容大小，这是正常的，这会产生空间浪费&#x3D;&#x3D;(操作系统会通过自己的页面划分和调度算法来解决这个问题，我们不必担心)，&#x3D;&#x3D;也就是我们看到的两块淡红色的部分，浪费了6个字节</font></strong></li></ol><p><font color=red><strong>重点记忆：</strong></font></p><ol><li><font color=red><strong>对齐数：成员自身大小与默认对齐数的较小值</strong></font></li><li><font color=red><strong>最大对齐数：所以成员中对齐数最大值</strong></font></li><li><font color=red><strong>结构体总大小：最大对齐数的整数倍</strong></font></li><li><font color=red><strong>vs环境下默认对齐数为8，Linux没有默认对齐数</strong></font></li></ol><p><font color=blue><strong>内存对齐存在的意义：</strong></font></p><ol><li><p><font color=red><strong>平台原因(移植原因)：不是所有的硬件平台都能访问任意地址上的任意数据的；某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常</strong></font></p></li><li><p><font color=red><strong>性能原因：数据结构(尤其是栈)应该尽可能地在自然边界上对齐,原因在于为了访问未对齐的内存，处理器需要作两次内存访问；而对齐的内存访问仅需要一次访问</strong></font></p></li><li><p><font color=red><strong>总的来说，结构体的内存对齐是拿空间来换取时间的做法</strong></font></p></li></ol><p><strong><font color=block>在设计结构体的时候，我们既要满足对齐，又要节省空间，如何做到：让占用空间小的成员尽量集中在一起</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//例如：S1和S2类型的成员一模一样，但是S1和S2所占空间的大小有了一些区别</span><span class="token keyword">struct</span> <span class="token class-name">S1</span><span class="token punctuation">&#123;</span> <span class="token keyword">char</span> c1<span class="token punctuation">;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token keyword">char</span> c2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S2</span><span class="token punctuation">&#123;</span> <span class="token keyword">char</span> c1<span class="token punctuation">;</span> <span class="token keyword">char</span> c2<span class="token punctuation">;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>结构体默认对齐数的修改方法：</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span><span class="token comment">//设置默认对齐数为8</span></span><span class="token keyword">struct</span> <span class="token class-name">S1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> c1<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">char</span> c2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token comment">//取消设置的默认对齐数，还原为默认</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span><span class="token comment">//设置默认对齐数为1</span></span><span class="token keyword">struct</span> <span class="token class-name">S2</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> c1<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">char</span> c2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token comment">//取消设置的默认对齐数，还原为默认</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//输出的结果是什么？</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">S1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结构体大小为12</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">S2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结构体大小为6</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100303.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100303.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910123720410"></p></blockquote><hr><h3 id="结构体传参"><a href="#结构体传参" class="headerlink" title="结构体传参"></a><strong>结构体传参</strong></h3><blockquote><p><strong><code>结构体传参的时候，要传结构体的地址</code></strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//结构体传参</span><span class="token keyword">void</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//结构体地址传参</span><span class="token keyword">void</span> <span class="token function">print2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token operator">*</span> ps<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">print1</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//传结构体</span> <span class="token function">print2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传地址</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color=red><strong>思考：为什么要传结构体地址的？</strong></font></p><ol><li><font color=red><strong>函数传参的时候，参数是需要压栈，会有时间和空间上的系统开销</strong></font></li><li><font color=red><strong>如果传递一个结构体对象的时候，结构体过大，参数压栈的的系统开销比较大，所以会导致性能的下降</strong></font></li></ol></blockquote><hr><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a><strong>枚举</strong></h2><blockquote><p><strong><code>枚举：就是一一列举，把可能的取值列举出来，方便我们使用</code></strong></p><p><strong><code>枚举是一种类型，定义枚举类型需要加上枚举类名，比如enum Day d=sum</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">我们常用的枚举一般就这三个：星期、性别、颜色<span class="token keyword">enum</span> <span class="token class-name">Day</span>，<span class="token keyword">enum</span> <span class="token class-name">Sex</span>，<span class="token keyword">enum</span> <span class="token class-name">Color</span>叫做枚举类型；其中的成员叫做枚举常量这些枚举常量（可能取值）都是有值的，默认从<span class="token number">0</span>开始，一次递增<span class="token number">1</span>，当然在定义的时候也可以赋初值，比如RED<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">enum</span> <span class="token class-name">Day</span><span class="token comment">//星期</span><span class="token punctuation">&#123;</span>     Mon<span class="token punctuation">,</span><span class="token comment">//值0</span>     Tues<span class="token punctuation">,</span><span class="token comment">//值1</span>     Wed<span class="token punctuation">,</span><span class="token comment">//值2</span>     Thur<span class="token punctuation">,</span><span class="token comment">//值3</span>     Fri<span class="token punctuation">,</span><span class="token comment">//值4</span>     Sat<span class="token punctuation">,</span><span class="token comment">//值5</span>     Sun<span class="token comment">//值6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//注意分号</span><span class="token keyword">enum</span> <span class="token class-name">Sex</span><span class="token comment">//性别</span><span class="token punctuation">&#123;</span>     MALE<span class="token punctuation">,</span><span class="token comment">//值0</span>     FEMALE<span class="token punctuation">,</span><span class="token comment">//值1</span>     SECRET<span class="token comment">//值2</span><span class="token punctuation">&#125;</span>；<span class="token keyword">enum</span> <span class="token class-name">Color</span><span class="token comment">//颜色</span><span class="token punctuation">&#123;</span>     RED<span class="token punctuation">,</span><span class="token comment">//值0</span>     GREEN<span class="token punctuation">,</span><span class="token comment">//值1</span>     BLUE<span class="token comment">//值2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">Color</span><span class="token comment">//颜色</span><span class="token punctuation">&#123;</span> RED<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">//初始化枚举常量</span> GREEN<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> BLUE<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>枚举的优缺点：</code></strong></p><p><strong>思考：我们可以使用 #define 定义常量，为什么非要使用枚举？</strong></p><p><strong>枚举的优点：</strong></p><ol><li><strong>增加代码的可读性和可维护性</strong> </li><li><strong>和#define定义的标识符比较枚举有类型检查，更加严谨。</strong> </li><li><strong>防止了命名污染（封装）</strong> </li><li><strong>便于调试</strong> </li><li><strong>使用方便，一次可以定义多个常量</strong></li></ol><p><strong>枚举的缺点：主要体现在内存浪费上以及书写麻烦</strong></p></blockquote><hr><h2 id="联合体"><a href="#联合体" class="headerlink" title="联合体"></a><strong>联合体</strong></h2><blockquote><p><strong><code>联合(共用体)也是一种特殊的自定义类型</code></strong>—<strong>这种类型定义的变量也包含一系列的成员，特征是这些<code>成员公用同一块空间</code>（所以联合也叫共用体）</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">union</span> Un<span class="token punctuation">&#123;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token comment">//1</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//这里可以看到联合体共用一块空间，联合体的大小＝最大成员大小</span><span class="token keyword">union</span> Un u<span class="token punctuation">;</span><span class="token comment">//定义结构体变量</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"联合体u的大小：%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"联合体u的地址：%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"联合体u的成员c的地址：%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"联合体u的成员i的地址：%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100940.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100940.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910164018354"></p><p><strong><code>联合体的特点：</code></strong></p><p><strong><font color=red>联合的成员是共用同一块内存空间的，这样一个联合变量的大小，至少是最大成员的大小（因为联合至少得有能力保存最大的那个成员）</font></strong></p><p><strong><code>联合体大小的计算：</code></strong></p><ol><li><strong><font color=red>联合的大小至少是最大成员的大小</font></strong></li><li><strong><font color=red>当最大成员大小不是最大对齐数的整数倍的时候，就要对齐到最大对齐数的整数倍</font></strong></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">union</span> Un1<span class="token punctuation">&#123;</span><span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//5 1 8 所以对齐数是1</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//4 4 8 所以对齐数是4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">union</span> Un2<span class="token punctuation">&#123;</span><span class="token keyword">short</span> c<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//14 2 8 所以对齐数是2</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//4 4 8 所以对齐数是4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">union</span> Un1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Un1联合体最大成员是5，不是最大对齐数4的倍数，所以大小为8</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">union</span> Un2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Un2联合体最大成员是14，要是最大对齐数4的整数倍，所以为16</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100390.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100390.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910165308920"></p></blockquote><hr><h2 id="扩展：位段"><a href="#扩展：位段" class="headerlink" title="扩展：位段"></a><strong>扩展：位段</strong></h2><blockquote><p><strong><code>什么是位段？</code></strong></p><ol><li><strong>位段(bit-field)是以位为单位来定义结构体或联合体中的成员变量所占的空间</strong></li><li><strong>含有位段的结构体(联合体)称为位段结构</strong></li><li><strong>采用位段结构既能够节省空间，又方便于操作</strong></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//A就是一个位段类型</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token comment">//以下就是对于位段的理解</span>    <span class="token comment">//一个int是4字节，也就是32个bit位</span>    <span class="token keyword">int</span> _a <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//使用2bit，还有30bit</span>    <span class="token keyword">int</span> _b <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//使用5bit，还有25bit</span>    <span class="token keyword">int</span> _c <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//使用10bit，还有15bit</span>    <span class="token keyword">int</span> _d <span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">//使用30bit，剩下的15bit不够，重新开一个int类型的4字节存储</span><span class="token comment">//位段不利于跨平台性，主要用于节省空间的</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"结构体A的大小：%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//整个结构体A一共开辟了2个int类型空间，所以8字节</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100409.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100409.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910130502985"></p><p><strong><code>位段的内存分配问题：</code></strong></p><ol><li><strong>位段的成员可以是 <code>unsigned int</code> 、 <code>signed int</code> 或者是 <code>char</code> （属于整形家族）类型 —int就是signed int的缩写</strong></li><li><strong>位段的空间上是按照需要以4个字节（ int ）或者1个字节（ char ）的方式来开辟的</strong></li><li><strong>位段涉及很多不确定因素，位段是不跨平台的，注重可移植的程序应该避免使用位段</strong></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span> <span class="token keyword">char</span> a<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">char</span> b<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token keyword">char</span> c<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token keyword">char</span> d<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//3个bit位存储10</span>s<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//4个bit位存储12</span>s<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//5个bit位存储3</span>s<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//4个bit位存储4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100814.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100814.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910161243485"></p><p><strong><code>位段的跨平台问题：</code></strong></p><ol><li><font color=red><strong>int 位段被当成有符号数还是无符号数是不确定的</strong> </font></li><li><font color=red><strong>位段中最大位的数目不能确定（16位机器最大16，32位机器最大32，写成27，在16位机器会出问题）</strong></font></li><li><font color=red><strong>位段中的成员在内存中从左向右分配，还是从右向左分配标准尚未定义—比如上图发现它存储就是混乱存储的，哪里有空放哪里</strong></font></li><li><font color=red><strong>当一个结构包含两个位段，第二个位段成员比较大，无法容纳于第一个位段剩余的位时，是舍弃剩余的位还是利用，这是不确定的</strong></font></li></ol><p><strong><font color=blue>位段的应用常见：网络发包的时候节约空间:</font></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101195.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122101195.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910162034059"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符函数与字符串函数</title>
      <link href="/2022/11/08/11.zi-fu-han-shu-yu-zi-fu-chuan-han-shu/"/>
      <url>/2022/11/08/11.zi-fu-han-shu-yu-zi-fu-chuan-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="字符函数与字符串函数"><a href="#字符函数与字符串函数" class="headerlink" title="字符函数与字符串函数"></a><strong>字符函数与字符串函数</strong></h1><p><strong>前言：库函数，最好多多看官方文档</strong></p><hr><h2 id="求字符串长度的函数—strlen"><a href="#求字符串长度的函数—strlen" class="headerlink" title="求字符串长度的函数—strlen"></a><strong>求字符串长度的函数—strlen</strong></h2><blockquote><p><strong><code>strlen：求字符串长度---原型：size_t strlen ( const char * str );</code></strong></p><p><font color=red><strong>1.strlen：作用是测试字符串长度的函数，函数的值为字符串实际的长度（不包括 ‘\0’ 在内）</strong></font></p><p><strong><font color=red>2.参数指向的字符串必须要以’\0’结束</font>—否则返回随机值</strong></p><p><font color=red><strong>3.注意函数的返回值为size_t，是无符号的，结果不可能为负数</strong></font></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str1 <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str2 <span class="token operator">=</span> <span class="token string">"bbb"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1>str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"srt2>str1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058106.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058106.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220909222204124"></p></blockquote><hr><h2 id="长度不受限制的字符串函数—strncpy、strncat、strncmp"><a href="#长度不受限制的字符串函数—strncpy、strncat、strncmp" class="headerlink" title="长度不受限制的字符串函数—strncpy、strncat、strncmp"></a><strong>长度不受限制的字符串函数—strncpy、strncat、strncmp</strong></h2><blockquote><p><strong>长度受限的字符串函数：<code>strcpy、strcat、strcmp</code></strong></p><p><strong>长度不受限的字符串函数：<code>strncpy、strncat、strncmp</code></strong></p><p><strong><code>①strcpy：拷贝字符串---原型：char* strcpy(char * destination, const char * source );</code></strong></p><p><strong><font color=green>strcpy:作用是将字符串2复制到字符数组1中去</font>—strcpy(字符串1，字符串2)</strong></p><p><strong><font color=red>1.源字符串必须以 ‘\0’ 结束</font>—否则运行报错</strong></p><p><strong><font color=red>2.会将源字符串中的 ‘\0’ 拷贝到目标空间</font>—‘\0’是字符串的结束标志，也是字符串的内容</strong></p><p><strong><font color=red>3.目标空间必须足够大，以确保能存放源字符串</font>—不够就会越界</strong></p><p><strong><font color=red>4.目标空间必须可变</font>—不能拷贝const修饰的字符串</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1234567"</span><span class="token punctuation">;</span><span class="token comment">//目标字符串arr2必须够大，否则运行报错</span><span class="token function">strcpy</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝arr1的内容到arr2，并且结束标志'\0'也被拷贝，这里的拷贝是覆盖性的，所以没拷贝到的arr2[7]也变成了'\0'</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059058.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059058.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910005007024"></p><p><strong><code>②strcat：追加字符串---原型：char * strcat ( char * destination, const char * source );</code></strong></p><p><strong><font color=green>strcat：把字符串2连接到字符串1的后面，结果放在字符数组1中</font>—strcat(字符串1，字符串2)</strong></p><p><font color=red><strong>1.源字符串必须以 ‘\0’ 结束</strong></font></p><p><font color=red><strong>2.目标空间必须有足够的大，能容纳下源字符串的内容</strong></font></p><p><font color=red><strong>3.目标空间必须可修改</strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">//目标字符串arr1空间必须够大，否则运行报错</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">" world"</span><span class="token punctuation">;</span><span class="token function">strcat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059254.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059254.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910012049701"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059797.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059797.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910010440173"></p><p><strong><code>③strcmp：比较字符串大小---原型：int strcmp ( const char * str1, const char * str2 );</code></strong></p><p><strong><font color=green>strcmp：字符串不能用等号来比较大小，所以就用strcmp函数来比较</font>—strcmp(字符串1，字符串2)</strong></p><p><strong><font color=red>1.第一个字符串大于第二个字符串，则返回大于0的数字 </font>—一般为1</strong></p><p><strong><font color=red>2.第一个字符串等于第二个字符串，则返回0 </font>—0</strong></p><p><strong><font color=red>3.第一个字符串小于第二个字符串，则返回小于0的数字</font>—一般为-1</strong></p><p><strong>strcmp比较方法，一个字符一个字符的比较,比如上面代码，abd和abcdef的ab对应了，所以比较c和d的大小，d比c达，所以arr2&gt;arr1,返回小于0的数</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token comment">//目标字符串arr1空间必须够大，否则运行报错</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abd"</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059729.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059729.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910011242787"></p><p><strong><code>④strncpy：拷贝指定长度字符串---原型：char * strncpy ( char * destination, const char * source, size_t num );</code></strong></p><p><strong><font color=green>num：表示将字符串2中的num个单个字符复制到字符数组1中，最少为0个，最多不能超过字符串2的长度。作用与strcpy函数差不都，都是字符串复制函数</font></strong></p><p><font color=red><strong>1.拷贝num个字符从源字符串到目标空间</strong></font></p><p><font color=red><strong>2.如果源字符串的长度小于num，则拷贝完源字符串之后，在目标的后边追加0，直到num个</strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"xxxxxxxxxxxxxx"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"wor"</span><span class="token punctuation">;</span><span class="token function">strncpy</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059653.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059653.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910012523154"></p><p><strong><code>⑤strncat：指定长度追加字符串---原型：char * strncat ( char * destination, const char * source, size_t num );</code></strong></p><p><strong><font color=green>从字符串2的开头拷贝n个字符到字符串1的尾部</font>—strncat(字符串1，字符串2，num)</strong></p><p><font color=red><strong>1.strncat会将dest字符串最后的’\0’覆盖掉，字符追加完成后，再追加’\0’</strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">" world"</span><span class="token punctuation">;</span><span class="token function">strncat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059903.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059903.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910013207709"></p><p><strong><code>strncmp：指定长度比较字符串---原型：int strncmp ( const char * str1, const char * str2, size_t num );</code></strong></p><p><strong><font color=green>num：选择字符串的前n个字符进行比较，定义和strcmp一样</font>—strncmp(字符串1，字符串2，num)</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"heodl"</span><span class="token punctuation">;</span><span class="token keyword">int</span> result<span class="token operator">=</span><span class="token function">strncmp</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比较前三个字符</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059705.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059705.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910013526232"></p></blockquote><hr><h2 id="字符串查找函数—strstr、strtok"><a href="#字符串查找函数—strstr、strtok" class="headerlink" title="字符串查找函数—strstr、strtok"></a><strong>字符串查找函数—strstr、strtok</strong></h2><blockquote><p><strong><code>strstr:字符串查找---原型：char * strstr ( const char *str1, const char * str2);</code></strong></p><p><strong><font color=green>返回值：若str2是str1的子串，则返回str2在str1的首次出现的地址；如果str2不是str1的子串，则返回NULL</font></strong></p><p><font color=red><strong>1.找到了，返回首次找到的位置地址</strong></font></p><p><font color=red><strong>2.没有找到，返回空指针</strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdefabcdef"</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"bcde"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> result <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//result存储的是第一次找到匹配字符串的地址</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> result<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有找到字符串,返回空指针!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找到了字符串 %s\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//result存储的地址，所以把后面的字符串也给打印出来了</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059279.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059279.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910015154365"></p><p><strong><code>strtok：切割字符串，将str切分成一个个子串---原型：char * strtok ( char * str, const char * sep );</code></strong></p><p><strong><font color=green>当s中的字符查找到末尾时，返回NULL;如果查不到所标示的字符，则返回当前strtok的字符串的指针</font></strong></p><ol><li><strong>sep参数是个字符串，定义了用作分隔符的字符集合</strong> </li><li><strong>第一个参数指定一个字符串，它包含了0个或者多个由sep字符串中一个或者多个分隔符分割的标记</strong></li><li><strong><code>strtok函数找到str中的下一个标记，并将其修改为 \0 结尾</code>，返回一个指向这个标记的指针</strong></li><li><strong><code>strtok函数会改变被操作的字符串，所以在使用strtok函数切分的字符串一般都是临时拷贝的内容并且可修改</code></strong></li><li><strong>strtok函数的第一个参数不为 NULL ，函数将找到str中第一个标记，strtok函数将保存它在字符串中的位置</strong></li><li><strong>strtok函数的第一个参数为 NULL ，函数将在同一个字符串中被保存的位置开始，查找下一个标记</strong></li><li><strong>如果字符串中不存在更多的标记，则返回 NULL 指针</strong></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token string">"@."</span><span class="token punctuation">;</span><span class="token comment">//@ .是两个标记，先找标记@没有才找标记.</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"pure@.com"</span><span class="token punctuation">;</span><span class="token function">strtok</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//strtok会把@.改成'\0'结尾，返回指向这个标记的指针</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059297.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059297.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910083308116"></p><p><strong>注：<code>strtok很挫啊，一般别用，很复杂的一个库函数，属于是C语言早期实现的坑---可以参考《C陷阱与缺陷》看看C语言里挫的语法用作学习</code></strong></p></blockquote><hr><h2 id="错误信息报告函数—strerror"><a href="#错误信息报告函数—strerror" class="headerlink" title="错误信息报告函数—strerror"></a><strong>错误信息报告函数—strerror</strong></h2><blockquote><p><strong><code>strerror：返回错误码所对应的错误信息---原型：char * strerror ( int errnum );</code></strong></p><p><strong>常用的：return 0 意思就是No error    return -1 意思就是Unknow error</strong></p><p><strong>strerrpr常用在文件系统里用来反馈错误信息</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//打印错误码信息</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"错误码编号%d：%s\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span><span class="token function">strerror</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//文件系统反馈错误</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;errno.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//当库函数使用的时候，发生错误会把error这个全局错误码变量设置成为本次执行库函数产生的错误码</span><span class="token comment">//error是C语言提供的全局变量，可以直接使用，放在errno.h头文件中</span>FILE<span class="token operator">*</span> pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> pf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//反馈错误信息</span><span class="token function">strerror</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span>    pf<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//防止野指针</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059920.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059920.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910084707971"></p></blockquote><hr><h2 id="字符操作函数汇总"><a href="#字符操作函数汇总" class="headerlink" title="字符操作函数汇总"></a><strong>字符操作函数汇总</strong></h2><blockquote><table><thead><tr><th><strong>函数</strong></th><th><strong>如果他的参数符合下列条件就返回真</strong></th></tr></thead><tbody><tr><td><strong>iscntrl</strong></td><td><strong>任何控制字符</strong></td></tr><tr><td><strong>isspace</strong></td><td><strong>空白字符：空格‘ ’，换页‘\f’，换行’\n’，回车‘\r’，制表符’\t’或者垂直制表符’\v’</strong></td></tr><tr><td><strong>isdigit</strong></td><td><strong>十进制数字 0~9</strong></td></tr><tr><td><strong>isxdigit</strong></td><td><strong>十六进制数字，包括所有十进制数字，小写字母a<del>f，大写字母A</del>F</strong></td></tr><tr><td><strong>islower</strong></td><td><strong>小写字母a~z</strong></td></tr><tr><td><strong>isupper</strong></td><td><strong>大写字母A~Z</strong></td></tr><tr><td><strong>isalpha</strong></td><td><strong>字母a<del>z 或A</del>Z</strong></td></tr><tr><td><strong>isalnum</strong></td><td><strong>字母或者数字，a<del>z,A</del>Z,0~9</strong></td></tr><tr><td><strong>ispunct</strong></td><td><strong>标点符号，任何不属于数字或者字母的图形字符（可打印）</strong></td></tr><tr><td><strong>isgraph</strong></td><td><strong>任何图形字符</strong></td></tr><tr><td><strong>isprint</strong></td><td><strong>任何可打印字符，包括图形字符和空白字符</strong></td></tr></tbody></table><p><strong><code>字符转换函数：</code></strong></p><table><thead><tr><th><strong>int tolower ( int c );</strong></th></tr></thead><tbody><tr><td><strong>int toupper ( int c );</strong></td></tr></tbody></table></blockquote><hr><h2 id="内存操作函数—memcpy、memmove、memset、memcmp"><a href="#内存操作函数—memcpy、memmove、memset、memcmp" class="headerlink" title="内存操作函数—memcpy、memmove、memset、memcmp"></a><strong>内存操作函数—memcpy、memmove、memset、memcmp</strong></h2><blockquote><p><strong><code>①memcpy：由src所指内存区域复制count个字节到dest所指内存区域---原型：void * memcpy ( void * destination, const void * source, size_t num );</code></strong></p><p><strong><font color=blue>memcpy与strcpy的区别</font>：<code>strcpy只能复制字符串</code>，而<code>memcpy可以复制任意内容</code>，strcpy不需要指定长度，它遇到被复制字符的串结束符”\0”才结束，memcpy则是根据其第3个参数决定复制的长度</strong></p><p><font color=red><strong>1.函数memcpy从source的位置开始向后复制num个字节的数据到destination的内存位置</strong></font></p><p><font color=red><strong>2.这个函数在遇到 ‘\0’ 的时候并不会停下来</strong></font></p><p><font color=red><strong>3.如果source和destination有任何的重叠，复制的结果都是未定义的，函数返回指向dest的指针</strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr1<span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把arr1中的20个字节，也就是5个int类型放入arr2中</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059342.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059342.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910091716535"></p><p><strong><code>②memmove：拷贝内容到目标内存中---原型：void * memmove ( void destination, const void * source, size_t num );</code></strong></p><p><strong><font color=green>memcpy与memmove的区别</font>：当源内存和目标内存存在重叠时，memcpy会出现错误，而memmove能正确地实施拷贝，但这也增加了一点点开销</strong></p><p><font color=red><strong>1.和memcpy的差别就是memmove函数处理的源内存块和目标内存块是可以重叠的</strong></font></p><p><font color=red><strong>2.如果源空间和目标空间出现重叠，就得使用memmove函数处理</strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">memmove</span><span class="token punctuation">(</span>arr1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> arr1<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//从arr1开始，复制内容是20个字节也就是1 2 3 4 5，复制到arr1+2位置去，也就是 1 2后开始复制</span>    <span class="token comment">//所以有1 2 1 2 3 4 5，然后后面的没有覆盖的3个数还在arr1中，即8 9 10，所以打印处这个结果</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059541.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059541.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910093117935"></p><p><strong><code>③memset复制字符 c（一个无符号字符）到参数str所指向的字符串的前n个字符---原型：void *memset(void *str, int c, size_t n) </code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"This is string.h library function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">'$'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059510.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122059510.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910094118907"></p><p><strong><code>④memcmp：把存储区 str1 和存储区 str2 的前 n 个字节进行比较---原型：int memcmp(const void \*str1, const void \*str2, size_t n))**</code></strong></p><ul><li><strong>如果返回值 &lt; 0，则表示 str1 小于 str2</strong></li><li><strong>如果返回值 &gt; 0，则表示 str1 大于 str2</strong></li><li><strong>如果返回值 &#x3D; 0，则表示 str1 等于 str2</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token string">"abcdef"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token string">"ABCDEF"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str2 小于 str1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1 小于 str2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1 等于 str2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100988.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122100988.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220910094338235"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高阶指针</title>
      <link href="/2022/11/08/10.gao-jie-zhi-zhen/"/>
      <url>/2022/11/08/10.gao-jie-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="高阶指针"><a href="#高阶指针" class="headerlink" title="高阶指针"></a><strong>高阶指针</strong></h1><hr><p><font color=red><strong>全章总结：</strong></font></p><blockquote><ol><li><strong><code>sizeof(数组名)</code>，这里的数组名表示整个数组，<code>计算的是整个数组的大小</code></strong></li><li><strong><code>&amp;数组名</code>，这里的数组名表示整个数组，<code>取出的是整个数组的地址</code></strong></li><li><strong>除此之外所有的数组名都表示<code>首元素的地址</code></strong></li></ol></blockquote><hr><h2 id="字符指针"><a href="#字符指针" class="headerlink" title="字符指针"></a><strong>字符指针</strong></h2><blockquote><p><strong>在指针的类型中我们知道有一种指针类型为字符指针 char</strong>*</p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">'w'</span><span class="token punctuation">;</span> <span class="token keyword">char</span> <span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">;</span><span class="token comment">//取第一个字符，也就是w</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token string">"abcdef"</span><span class="token punctuation">;</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">;</span><span class="token comment">//这里会有个光标闪烁然后终止程序</span> <span class="token comment">//原因：abcdef赋值给p后，p带有常性属性const，但是编译并不会检查错误，运行才报错</span> <span class="token comment">//如果改成：const char *p="abcdef";</span> <span class="token comment">//*p="w"; 执行就会报错，无法修改的左值</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pstr <span class="token operator">=</span> <span class="token string">"hello world\n"</span><span class="token punctuation">;</span><span class="token comment">//这里是把一个字符串放到pstr指针变量里了吗？</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> pstr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印除hello world</span> <span class="token comment">//这里特别容易让人以为是把字符串 hello world放到字符指针 pstr 里了，但是本质是把字符串 hello world首字符的地址放到了pstr中。</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057216.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057216.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908175229447"></p><p><strong><code>char*指向的是目标首元素地址，而不重新开空间，如下：</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str1 <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str2 <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1 <span class="token operator">==</span> arr2<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr1=arr2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr1!=arr2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1=str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"str1!=str2\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057497.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057497.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908175757235"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057065.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057065.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908180124134"></p></blockquote><hr><h2 id="数组指针与指针数组"><a href="#数组指针与指针数组" class="headerlink" title="数组指针与指针数组"></a><strong>数组指针与指针数组</strong></h2><blockquote><p><font color=red><strong>核心问题一：指针结合性问题</strong></font></p><p><strong><code>首先我们要知道一些优先级问题：[]&gt;++或--&gt;*&gt;+或-</code></strong></p><p><font color=green><strong>下标&gt;自加自减&gt;解引用&gt;加减</strong></font></p><p><strong>举例：</strong></p><p><strong>int * p1[10];—指针数组—<font color=red>p1先和[]结合，说明p1是数组，然后存放10个int * 类型的指针，所以p1是一个数组，存放10个指针，叫做指针数组</font></strong></p><p><strong><code>int (*p2)[10]</code>;—数组指针—<font color=red>p2先和 * 结合，说明p2是一个指针变量，然后指向的是一个大小为10个整型的数组,所以p2是一个指针，指向数组，叫数组指针</font></strong></p><p><strong>这里要注意：[]的优先级要高于 * 号的，所以必须加上()来保证p先和*结合</strong></p><p><strong>总结：<code>优先看指针变量名先和谁结合</code>—<code>与* 结合是指针</code>，<code>与[]结合是数组</code>，然后再去确定另外的看它是指针数组还是数组指针</strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057921.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057921.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220909124927077"></p><p><font color=red><strong>int arr[5];—arr是一个整形数组，存放5个int类型的元素</strong></font></p><p><font color=red><strong><code>int * parr[10]</code>;—parr是一个指针数组，存放10个int * 类型的指针</strong></font></p><p><font color=red><strong><code>int (* parr2)[10]</code>;—parr2是一个数组指针，指向一个数组，数组里有10个int类型的元素</strong></font></p><p><font color=red><strong><code>int (* parr3[10])[5]</code>;—parr3是一个指针数组，存放10个指针数组，1个指针数组里又存5个int类型元素的数组</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057446.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057446.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220909153046065"></p><p><font color=red><strong>核心问题二：&amp;数组名与数组名问题</strong></font></p><p><strong><font color=green>arr 和 &amp;arr 分别是啥？</font>—<code>arr表示数组首元素的地址</code>—<code>&amp;arr 表示的是整个数组的地址</code>，而不是数组首元素的地址</strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr = %p\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组名代表首元素地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr+1 = %p\n"</span><span class="token punctuation">,</span> arr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr[0]=%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr[0]+1=%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;arr= %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&amp;数组名代表整个数组地址，只是表示是首元素地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;arr+1= %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&amp;arr+1是移动整个数组大小个地址---(D90->DB8:相差40个字节)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057138.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057138.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220909113758303"></p><p><font color=red><strong>核心问题三：数组指针的使用</strong></font></p><p><strong><font color=blue>错误使用实例：这样写代码，逻辑性 可读性太差</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">;</span><span class="token comment">//把数组arr的地址赋值给数组指针变量p</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//*p表示首元素地址，*p+i相当于让他地址加i个元素地址单位</span><span class="token comment">//但是我们一般很少这样写代码，这样写还不如直接用一级指针</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058346.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058346.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220909125504026"></p><p><strong><font color=blue>正确使用实例：</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//i调整行，j调整列</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> c<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//二维数组名相当于第一行的地址</span><span class="token comment">//*(p+i)相当于拿到了二维数组的第i行的地址，也相当于第i行的数组名</span><span class="token comment">//数组名表示首元素地址，其实也是第i行第一个元素的地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058967.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058967.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220909130956780"></p></blockquote><hr><h2 id="数组传参与指针传参"><a href="#数组传参与指针传参" class="headerlink" title="数组传参与指针传参"></a><strong>数组传参与指针传参</strong></h2><blockquote><p><font color=red><strong>在写代码的时候难免要把【数组】或者【指针】传给函数，那函数的参数该如何设计呢？</strong></font></p><p><strong><code>一维数组传参问题：</code></strong> <strong>—传数据就是传数据，传指针就是传地址</strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok?---可以，直接传入数组</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok?---可以，直接传入数组，这里的数组大小10没有用，毕竟形参的改变不影响实参</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token comment">//ok?---可以，数组名代表首元素地址，传入的是第一个int类型元素的地址</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok?---可以，传入的是地址，形参数量的20与实参传入无关</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token comment">//ok?--可以，这里是二级指针也是要地址，arr2数组名就是首元素地址</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>arr2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test2</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>二维数组传参问题：</code></strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok？---可以，传入的数据</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok？---不可以，行可以省略，列不可以省略，需要知道到底有多少列来确定整个数组大小</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok？---可以，传入的数据</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token comment">//ok？---不可以，二维数组名代表第一行的地址，即int(*)[5] 是数组指针，但这里的参数只是指针，所以不可以</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok？---不可以，这里实参arr是数组指针，这里形参是指针数组</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//ok？---可以，实参是数组指针，形参也是数组指针</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token comment">//ok？---不可以，这里要的是二级指针，传入数组指针是cu</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//总结：</span><span class="token comment">//二维数组传参，函数形参的设计只能省略第一个[]的数字</span><span class="token comment">//因为对一个二维数组，可以不知道有多少行，但是必须知道一行多少元素</span><span class="token comment">//二维数组名代表int(*)[]，即数组指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>一级指针传参问题：</code></strong></p><p><font color=red><strong>总结：一级指针可以传入<code>一级指针(ptr)</code> <code>一维数组名(arr)</code></strong></font></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//一级指针p，传给函数</span> <span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058305.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058305.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220909201829529"></p><p><strong><code>二级指针传参问题：</code></strong></p><p><font color=red><strong>总结：二级指针可以传入<code>二级指针(pptr)</code> <code>一级指针地址(&amp;ptr)</code> <code>二维数组名(arr2)</code></strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"address = %p\n"</span><span class="token punctuation">,</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>n<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> pp <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> arr2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058487.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058487.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220909202437648"></p></blockquote><hr><h2 id="函数指针与函数指针数组"><a href="#函数指针与函数指针数组" class="headerlink" title="函数指针与函数指针数组"></a><strong>函数指针与函数指针数组</strong></h2><blockquote><p><font color=red><strong>函数指针：就是指向函数地址的指针</strong></font></p><p><font color=red><strong>函数指针数组：就是存放指向函数地址指针的数组</strong></font></p><p><strong>函数指针总结：<font color=red>函数名代表函数地址</font>—<code>函数指针里的* 没有用</code>，是摆设，只是写上让自己逻辑更清晰</strong></p><p><strong><font color=blue>函数指针问题：</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">ADD</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ADD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数名都是代表函数所在地址</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> ADD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数名都是代表函数所在地址</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">;</span><span class="token comment">//pa是数组指针</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>ADD<span class="token punctuation">;</span><span class="token comment">//pf是ptrfunc的意思，pf是函数指针</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum2 <span class="token operator">=</span> <span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里调用后，sum2也是5，也就是说这里的函数指针里的*就是个摆设，没有用</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum=%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum2=%d\n"</span><span class="token punctuation">,</span> sum2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//高难度理解：(*(void (*)())0)();是什么意思？</span><span class="token comment">//解释：把0强制类型转换为void (*)()类型的函数指针，再去调用0地址处这个参数为无参 返回类型为void的函数</span><span class="token comment">//现象：0->0x11223344</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058283.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058283.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220909205108070"></p><p><strong><code>函数指针数组问题：</code></strong></p><p><strong>举例：函数指针对于个别问题的优化—<font color=red>函数指针数组的使用可以看作是C++重载的前身实现</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//未使用函数指针数组，通过直接调用函数使用</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> input <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 1:add           2:sub \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 3:mul           4:div \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请选择："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入操作数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入操作数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入操作数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入操作数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            ret <span class="token operator">=</span> <span class="token function">div</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"退出程序\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"选择错误\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用函数指针数组，优化代码结构</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>     <span class="token keyword">int</span> input <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> add<span class="token punctuation">,</span> sub<span class="token punctuation">,</span> mul<span class="token punctuation">,</span> div <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//函数指针数组实现转移表</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"*************************\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">" 1:add           2:sub \n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">" 3:mul           4:div \n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"*************************\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"请选择："</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> input <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"输入操作数："</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>              ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">[</span>input<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>          <span class="token keyword">else</span>               <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"输入有误\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058758.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058758.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220909211303192"></p></blockquote><hr><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a><strong>回调函数</strong></h2><blockquote><p><strong><font color=red>回调函数就是一个通过函数指针调用的函数</font></strong></p><p><strong>如果你把函数的指针（地址）作为参数传递给另一个 函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应</strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//库函数qsort实现排序</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//qosrt函数的使用者得实现一个比较函数</span><span class="token keyword">int</span> <span class="token function">int_cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> p1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> p2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>p1 <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int_cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用回调函数模拟实现qsort</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">int_cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> p1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> p2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>p1 <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">_swap</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span> p2<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p1 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p1 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> p2 <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p2 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">bubble</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>base<span class="token punctuation">,</span> <span class="token keyword">int</span> count <span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>cmp <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//函数指针int(*cmp)(void*,void*)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>count<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cmp</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> base <span class="token operator">+</span> j<span class="token operator">*</span>size <span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>base <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>           <span class="token punctuation">&#123;</span>               <span class="token function">_swap</span><span class="token punctuation">(</span><span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>base <span class="token operator">+</span> j<span class="token operator">*</span>size<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>base <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//int_cmp就是回调函数，调用的int(*cmp)(void*)(void*)函数指针</span>    <span class="token function">bubble</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int_cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058902.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122058902.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220909220131578"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据的存储</title>
      <link href="/2022/11/08/9.shu-ju-de-cun-chu/"/>
      <url>/2022/11/08/9.shu-ju-de-cun-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a><strong>数据的存储</strong></h1><hr><h2 id="数据类型的深入理解"><a href="#数据类型的深入理解" class="headerlink" title="数据类型的深入理解"></a><strong>数据类型的深入理解</strong></h2><blockquote><p><strong>char     &#x2F;&#x2F;字符数据类型</strong> </p><p><strong>short    &#x2F;&#x2F;短整型</strong> </p><p><strong>int     &#x2F;&#x2F;整形</strong> </p><p><strong>long     &#x2F;&#x2F;长整型</strong> </p><p><strong>long long  &#x2F;&#x2F;更长的整形</strong> </p><p><strong>float    &#x2F;&#x2F;单精度浮点数</strong> </p><p><strong>double    &#x2F;&#x2F;双精度浮点数</strong> </p><p><strong>_Bool  &#x2F;&#x2F;布尔类型—C99引入布尔类型，专门用来表示真假—0表示假，非0表示真—头文件#include&lt;stdbool.h&gt;</strong></p><p><strong><code>C语言数据类型的大小：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051358.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051358.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908000059271"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdbool.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">_Bool</span> flag<span class="token operator">=</span>true<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flag=true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flag=false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>C语言的数据类型家族分类：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051067.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051067.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908000439773"></p><p><strong><code>整形家族：%u打印无符号整型、%d打印十进制有符号整型</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051922.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051922.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908000528893"></p><p><font color=red><strong>注意：char到底是unsigned char还是signed char是取决于编译器的底层实现</strong></font>—<strong><code>常见的编译器下：char就是signed char</code></strong></p><p><strong><code>浮点型家族：%f打印单精度浮点数，%lf打印双精度浮点数</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051903.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051903.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908001311119"></p><p><strong><code>构造类型(自定义类型)家族：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051796.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051796.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908001343579"></p><p><strong><code>指针类型家族：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051494.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051494.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908001409229"></p><p><strong><code>空类型家族：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051269.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051269.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908001452865"></p></blockquote><hr><h2 id="整形在内存中的存储方式"><a href="#整形在内存中的存储方式" class="headerlink" title="整形在内存中的存储方式"></a><strong>整形在内存中的存储方式</strong></h2><blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x11223344</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051745.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051745.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908002232339"></p><p><strong>调用内存监视窗口我们可以看到，在调试器的内存窗口中默认是十六进制的形式展示的</strong>—<strong>&#x3D;&#x3D;内存中的数据解析成文本内容展示，参考意义不大&#x3D;&#x3D;</strong></p><p><font color=red><strong>我们一般调试代码建议把列调成4，方便查看整形</strong></font></p><p><strong><code>整形的二进制有三种表示方法：原码、反码、补码</code></strong>—<font color=red><strong>内存中存储的是二进制补码</strong></font>—<font color=green><strong>可看见的展现是二进制原码</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051936.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051936.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908002912866"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051077.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051077.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908003353026"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051221.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122051221.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908003436527"></p><p><strong><code>为什么计算机内存要以补码形式存放？</code></strong></p><p><font color=red><strong>原因在于，使用补码，可以将符号位和数值域统一处理； 同时，加法和减法也可以统一处理（CPU只有加法器）,此外补码与原码相互转换，其运算过程是相同的，不需要额外的硬件电路</strong></font></p></blockquote><hr><h2 id="大小端字节序的深入理解"><a href="#大小端字节序的深入理解" class="headerlink" title="大小端字节序的深入理解"></a><strong>大小端字节序的深入理解</strong></h2><blockquote><p><strong><font color=red>大端字节序存储：数据的<code>低字节序数据</code>存放在<code>高地址</code>处，<code>高字节序数据</code>存放在<code>低地址</code>处，这种存储方式叫做<code>大端字节序存储</code></font>—<code>11 22 33 44(大端)</code></strong></p><p><strong><font color=red>小端字节序存储：数据的<code>低字节序数据</code>存放在<code>低地址</code>处，<code>高字节序数据</code>存放在<code>高地址</code>处，这种存储方式叫做<code>小端字节序存储</code></font>—<code>44 33 22 11(小端)</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057145.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057145.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908005707023"></p><p><strong><code>为什么有大端和小端?</code></strong></p><p><strong>这是因为在计算机系统中，我们是以字节为单位的，每个地址单元都对应着一个字节，一个字节为8 bit。但是在C语言中除了8 bit的char之外，还有16 bit的short 型，32 bit的long型（要看具体的编译器），另外，对于位数大于8位的处理器，例如16位或者32 位的处理器，由于寄存器宽度大于一个字节，那么必然存在着一个如何将多个字节安排的问题。因此就导致了大端存储模式和小端存储模式</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//大小端判断法</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//取a的第一个字节</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"小端\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"大端\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057739.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057739.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908011559846"></p></blockquote><hr><h2 id="浮点型数据在内存中的存储方法"><a href="#浮点型数据在内存中的存储方法" class="headerlink" title="浮点型数据在内存中的存储方法"></a><strong>浮点型数据在内存中的存储方法</strong></h2><blockquote><p><strong><code>IEEE 754规定：（IEEE：二进制浮点数算术标准）</code></strong></p><p><font color=red><strong>对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057504.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057504.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908073425305"></p><p><font color=red><strong>对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057659.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122057659.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220908073517456"></p><p><strong>IEEE 754对有效数字M，有一些特别规定：<code>前面说过， 1≤M&lt;2 ，也就是说，M可以写成 1.xxxxxx 的形式，其中xxxxxx表示小数部分</code></strong></p><p>IEEE 754规定，在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存后面的 xxxxxx部分。比如保存1.01的时候，只保存01，等到读取的时候，再把第一位的1加上去。这样做的目的，是节省1位有效数字。以32位 浮点数为例，留给M只有23位，将第一位的1舍去以后，等于可以保存24位有效数字。</p><p><strong>IEEE 754对指数E，有一些特别规定：<code>E为一个无符号整数</code></strong></p><p>这意味着，如果E为8位，它的取值范围为0 ~ 255；如果E为11位，它的取值范围为0~2047。但是，我们 知道，科学计数法中的E是可以出现负数的，所以IEEE 754规定，存入内存时E的真实值必须再加上一个中间数，对于8位的E，这个中间数 是127；对于11位的E，这个中间数是1023。比如，2^10的E是10，所以保存成32位浮点数时，必须保存成10+127&#x3D;137，即 10001001。</p><br><p><strong><font color=green>指数E从内存中取出可以再分为三种情况：</font></strong></p><p><font color=red><strong>1. E不全为0或不全为1</strong></font></p><p><strong>这时，浮点数就采用下面的规则表示，即指数E的计算值减去127（或1023），得到真实值，再将有效数字M前加上第一位的1。</strong></p><p><strong>比如：0.5（1&#x2F;2）的二进制形式为0.1，由于规定正数部分必须为1，即将小数点右移1位，则为 1.0*2^(-1)，其阶码为-1+127&#x3D;126，表示为01111110，而尾数1.0去掉整数部分为0，补齐0到23位00000000000000000000000，则其二进 制表示形式为:0 01111110 00000000000000000000000</strong></p><p><font color=red><strong>2. E全为0</strong></font></p><p><strong>这时，浮点数的指数E等于1-127（或者1-1023）即为真实值，有效数字M不再加上第一位的1，而是还原为0.xxxxxx的小数。这样做是为了表示±0，以及接近于 0的很小的数字</strong></p><p><font color=red><strong>3. E全为1</strong></font></p><p><strong>这时，如果有效数字M全为0，表示±无穷大（正负取决于符号位s）</strong></p><p><strong><font color=green>举例：</font></strong></p><p><font color=red><strong>为什么 0x00000009 还原成浮点数，就成了 0.000000 ？</strong></font></p><ol><li><strong>首先，将 0x00000009 拆分，得到第一位符号位s&#x3D;0，后面8位的指数 E&#x3D;00000000 ， 最后23位的有效数字M&#x3D;000 0000 0000 0000 0000 1001</strong></li><li><strong>9 -&gt; <font color=green>0</font><font color=red>000 0000 0</font>&#x3D;&#x3D;000 0000 0000 0000 0000 1001&#x3D;&#x3D;</strong></li><li><strong>由于指数E全为0，所以符合上一节的第二种情况。因此，浮点数V就写成： V&#x3D;(-1)^0 × 0.00000000000000000001001×2^(-126) &#x3D;1.001×2^(-146)</strong></li><li><strong>显然，V是一个很小的接近于0的正数，所以用十进制小数表示就是0.000000</strong></li></ol><p><font color=red><strong>请问浮点数9.0，如何用二进制表示？还原成十进制又是多少？</strong></font></p><ol><li><strong>首先，浮点数9.0等于二进制的1001.0，即1.001×2^3</strong></li><li><strong>9.0 -&gt; 1001.0 -&gt;(-1)^ 01.0012^3 -&gt; s&#x3D;0, M&#x3D;1.001,E&#x3D;3+127&#x3D;130</strong></li><li><strong>那么，第一位的符号位s&#x3D;0，有效数字M等于001后面再加20个0，凑满23位，指数E等于3+127&#x3D;130， 即10000010</strong></li><li><strong>所以，写成二进制形式，应该是s+E+M，即0 10000010 001 0000 0000 0000 0000 0000</strong></li><li><strong>这个32位的二进制数，还原成十进制，正是 1091567616</strong></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数栈帧的创建和销毁</title>
      <link href="/2022/11/08/8.han-shu-zhan-zheng-de-chuang-jian-he-xiao-hui/"/>
      <url>/2022/11/08/8.han-shu-zhan-zheng-de-chuang-jian-he-xiao-hui/</url>
      
        <content type="html"><![CDATA[<h1 id="函数栈帧的创建和销毁"><a href="#函数栈帧的创建和销毁" class="headerlink" title="函数栈帧的创建和销毁"></a><strong>函数栈帧的创建和销毁</strong></h1><hr><h2 id="寄存器的认知"><a href="#寄存器的认知" class="headerlink" title="寄存器的认知"></a><strong>寄存器的认知</strong></h2><blockquote><p><font color=green><strong>函数栈帧的创建和销毁离不开寄存器，了解函数栈帧之前先了解一下cpu中的寄存器</strong></font></p><p><font color=green><strong>cpu中供应用程序员使用的寄存器主要有：通用寄存器（EAX、EBX、ECX、EDX、ESP、EBP、ESI、EDI），段寄存器（CS、DS、SS、ES、FS、GS），标志和控制寄存器（EIP、EFLAGS）</strong></font></p><p><font color=red><strong>其中EBP一般用作基址指针，ESP一般用作堆栈指针</strong></font><strong>—<code>ebp作为栈底指针，esp作为栈顶指针</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018801.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018801.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907221235874"></p><p><strong><code>对于内存的认知：栈区、堆区、全局静态区、常量区、代码区</code></strong> <strong>—实际存储是从<code>高地址往低地址方向存储</code></strong>—<strong><font color=red>这也说明了为什么int a&#x3D;0x11223344在查看内存监视器的时候，地址内容显示是44 33 22 11</font></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018113.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018113.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907232209789"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018051.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018051.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907221349250"></p><p><strong><code>对于esp和ebp的认知：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019412.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019412.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907221739217"></p><p><strong><code>举例代码：</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">ADD</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token keyword">return</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token function">ADD</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过反汇编有了如下图的结果：</strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019617.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019617.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907222908402"></p></blockquote><hr><h2 id="栈帧的创建"><a href="#栈帧的创建" class="headerlink" title="栈帧的创建"></a><strong>栈帧的创建</strong></h2><blockquote><p><strong>通过上面的举例代码，我们剖析这个栈帧创建过程：<font color=red>首先是main函数创建栈帧，然后是ADD函数创建栈帧</font></strong></p><p><strong><code>main函数创建栈帧过程：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019690.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019690.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907231421728"></p><p><strong><code>main函数栈帧创建的详细步骤：</code></strong></p><p><font color=red><strong>1.main函数创建栈帧之前：</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019499.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019499.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907224111822"></p><p><font color=red><strong>2.ebp压栈，esp指向开辟空间的顶端并赋值给ebp指针</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019636.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019636.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907224219079"></p><p><font color=red><strong>3.esp-e4h即main函数栈帧大小为e4h字节，esp指向main函数栈顶</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019871.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019871.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907224425193"></p><p><font color=red><strong>4.ebx、esi、edi压栈并给edi加载有效地址ebp-24h，将edi和ebp之间的9个地址赋值为cc cc cc cc</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019254.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019254.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907224605694"></p><p><font color=red><strong>5.给ebp-8，ebp-14，ebp-20h赋初值exa压栈，并将ebp-14h的值传给eax，ecx压栈，并把ebp-8的值传给ecx，这个过程就是函数传参的过程。调用函数ADD之前把call下一句地址压栈</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019616.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019616.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907224951250"></p><p><strong><code>至此main函数的函数栈帧的创建和数据初始化就完成了</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019732.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019732.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907225051343"></p><p><strong><code>ADD函数栈帧的创建：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019246.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019246.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907225252420"></p><p><strong>add函数栈帧的创建和main函数栈帧创建是一样的，需要注意的是，ADD函数执行结束后的返回值保存在了寄存器eax中，就是避免ADD函数栈帧销毁时，主函数无法访问ADD返回值。由此可见函数返回值是如何返回的。</strong></p><p><strong><code>ADD函数栈帧的创建详细过程：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019820.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019820.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907225652946"></p></blockquote><hr><h2 id="栈帧的销毁"><a href="#栈帧的销毁" class="headerlink" title="栈帧的销毁"></a><strong>栈帧的销毁</strong></h2><blockquote><p><strong>以ADD函数函数栈帧的销毁为例</strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019319.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019319.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907225827319"></p><p><strong><code>ADD函数栈帧销毁详细步骤：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019965.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122019965.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907225915905"></p></blockquote><hr><h2 id="函数传参、返回值、初始化赋值、调用、执行结束问题的思考"><a href="#函数传参、返回值、初始化赋值、调用、执行结束问题的思考" class="headerlink" title="函数传参、返回值、初始化赋值、调用、执行结束问题的思考"></a><strong>函数传参、返回值、初始化赋值、调用、执行结束问题的思考</strong></h2><blockquote><p><strong><code>函数如何传参：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122020536.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122020536.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907230044817"></p><p><strong><code>函数返回值如何返回：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122020157.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122020157.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907230114566"></p><p><strong><code>函数中变量如何初始化和赋值：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122020514.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122020514.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907230323143"></p><p><strong><code>函数如何调用如何返回：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122020559.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122020559.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907230408724"></p><p><strong><code>函数执行结束后系统进行了什么操作:</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122020739.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122020739.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907230457283"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言初阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构体</title>
      <link href="/2022/11/08/7.jie-gou-ti/"/>
      <url>/2022/11/08/7.jie-gou-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a><strong>结构体</strong></h1><hr><h2 id="结构体的声明"><a href="#结构体的声明" class="headerlink" title="结构体的声明"></a><strong>结构体的声明</strong></h2><blockquote><p><strong><code>结构体的基本认知：结构是一些值的集合，这些值称为成员变量。结构的每个成员可以是不同类型的变量</code></strong></p><p><font color=red><strong>1.结构体的声明</strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//声明一个学生的结构体类型</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token punctuation">&#123;</span> <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//名字</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//年龄</span> <span class="token keyword">char</span> sex<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//性别</span> <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//学号</span><span class="token punctuation">&#125;</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span><span class="token comment">//分号不能丢---这里可以写s1，s2等名称，意思是创建了s1和s2两个结构体变量，它们是全局的变量</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Stu</span> s<span class="token punctuation">;</span><span class="token comment">//定义一个结构体变量，s是局部的变量</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018691.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018691.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907214224723"></p><p><font color=red><strong>2.结构体成员的初始化</strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//声明一个学生的结构体类型</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token punctuation">&#123;</span> <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//名字</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//年龄</span> <span class="token keyword">char</span> sex<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//性别</span> <span class="token keyword">char</span> id<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//学号</span><span class="token punctuation">&#125;</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span><span class="token comment">//分号不能丢---这里可以写s1，s2等名称，意思是创建了s1和s2两个结构体变量，它们是全局的变量</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Stu</span> s<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"001"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//定义一个结构体变量，s是局部的变量</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d %s %s\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>age<span class="token punctuation">,</span>s<span class="token operator">-></span>sex<span class="token punctuation">,</span>s<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018227.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018227.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907213952284"></p></blockquote><h2 id="结构体成员的访问"><a href="#结构体成员的访问" class="headerlink" title="结构体成员的访问"></a><strong>结构体成员的访问</strong></h2><blockquote><p><strong><code>结构体成员的访问方法:点操作符(.)或者结构体指针(-&gt;)</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//1：点操作符(.)访问结构体成员  2：结构体指针(->)访问结构体成员</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//声明一个学生的结构体类型</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//名字</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//年龄</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token operator">*</span> ps<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1：使用点操作符(.)访问对象的成员</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name = %s   age = %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>ps<span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>ps<span class="token punctuation">)</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2：使用结构体指针(->)访问指向对象的成员</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name = %s   age = %d\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>name<span class="token punctuation">,</span> ps<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Stu</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结构体地址传参</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018632.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018632.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907214609762"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018264.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018264.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907215451932"></p></blockquote><h2 id="结构体传参"><a href="#结构体传参" class="headerlink" title="结构体传参"></a><strong>结构体传参</strong></h2><blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//结构体传参</span><span class="token keyword">void</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">S</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//结构体地址传参</span><span class="token keyword">void</span> <span class="token function">print2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">S</span><span class="token operator">*</span> ps<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ps<span class="token operator">-></span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">print1</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//传结构体</span><span class="token function">print2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传地址</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>上面的 print1 和 print2 函数哪个好些？</code>—当然是print2()函数</strong></p><p><font color=red><strong>原因：函数传参的时候，参数是需要压栈的。 如果传递一个结构体对象的时候，结构体过大，参数压栈的的系统开销比较大，所以会导致性能的下降</strong></font></p><p><strong><code>结论：结构体传参的时候，要传结构体的地址</code></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言初阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>低阶指针</title>
      <link href="/2022/11/08/6.di-jie-zhi-zhen/"/>
      <url>/2022/11/08/6.di-jie-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="低阶指针"><a href="#低阶指针" class="headerlink" title="低阶指针"></a><strong>低阶指针</strong></h1><hr><h2 id="理解指针"><a href="#理解指针" class="headerlink" title="理解指针"></a><strong>理解指针</strong></h2><blockquote><p><strong><code>指针的理解：</code><font color=red>指针就是地址</font>，平时说的指针是指针变量，是用来存放内存地址的变量</strong></p><p><font color=red><strong>指针在内存中的存储：</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017952.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017952.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907172519544"></p><p><strong>我们可以通过<code>&amp;</code>（取地址操作符）<code>取出变量的内存起始地址</code>，把地址可以存放到一个变量中，这个变量就是指针变量，比如上图的p</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//在内存中开辟一块空间</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//这里我们对变量a，取出它的地址，可以使用&amp;操作符</span>    <span class="token comment">//a变量占用4个字节的空间，这里是将a的4个字节的第一个字节的地址存放在p变量中，p就是一个指针变量</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017257.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017257.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907173158753"></p><p><strong>调节内存监视窗口显示规格为4个位，则2个数表示一个字节，int是4个字节，则0a表示的是10，存储了a&#x3D;10</strong></p><p><strong><code>指针的大小：</code></strong></p><p><strong><font color=red>补充：</font></strong></p><p><strong><code>对于32位的机器，假设有32根地址线，那么假设每根地址线在寻址的时候产生高电平（高电压）和低电 平（低电压）就是（1或者0）；这里就有2的32次方个地址，每个地址标识一个字节，那我们就可以给 （2^32Byte == 2^32/1024KB ==  2^32/1024/1024MB==2^32/1024/1024/1024GB == 4GB） ,则有4G的空闲进行编址</code></strong></p><p><strong><font color=red>结论</font>：在<code>32位</code>的机器上，地址是32个0或者1组成二进制序列，那地址就得用4个字节的空间来存储，所以一个&#x3D;&#x3D;指针变量的大小&#x3D;&#x3D;就应该是&#x3D;&#x3D;4个字节&#x3D;&#x3D;</strong></p><p><strong><font color=red>结论</font>：在<code>64位</code>机器上，有64个地址线，那一个指针变量的大小是&#x3D;&#x3D;8个字节&#x3D;&#x3D;，才能存放一个地址</strong></p><p><strong><font color=red>结论</font>：指针的大小只与地址线个数有关</strong></p></blockquote><hr><h2 id="指针与指针类型"><a href="#指针与指针类型" class="headerlink" title="指针与指针类型"></a><strong>指针与指针类型</strong></h2><blockquote><p><strong><code>指针类型：</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span>  <span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">short</span> <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">int</span>   <span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> 类型的指针是为了存放 <span class="token keyword">char</span> 类型变量的地址<span class="token keyword">short</span><span class="token operator">*</span> 类型的指针是为了存放 <span class="token keyword">short</span> 类型变量的地址<span class="token keyword">int</span><span class="token operator">*</span> 类型的指针是为了存放 <span class="token keyword">int</span> 类型变量的地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>指针类型的含义：指针的类型决定了指针向前或者向后走一步有多大（距离）</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> pc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>n<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> pi <span class="token operator">=</span> <span class="token operator">&amp;</span>n<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;n=%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pc=%p\n"</span><span class="token punctuation">,</span> pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pc+1=%p\n"</span><span class="token punctuation">,</span> pc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//pc存储的char类型，pc+1，地址往后移动一个类型大小，大小为char的大小 1字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pi=%p\n"</span><span class="token punctuation">,</span> pi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pi+1=%p\n"</span><span class="token punctuation">,</span> pi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//pi存储的int类型，pi+1，地址往后移动一个类型大小，大小为int的大小 4字节</span><span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017828.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017828.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907174526005"></p><p><strong><code>指针的解引用：指针的类型决定了，对指针解引用的时候有多大的权限（能操作几个字节）</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0x11223344</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> pc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>n<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> pi <span class="token operator">=</span> <span class="token operator">&amp;</span>n<span class="token punctuation">;</span>    <span class="token comment">//pc和pi指向同一块空间&amp;n</span><span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//pc是char类型，只能操作一个字节，即它赋值为0只是让第一个字节赋值为0，其他三个字节没有变，结果没让n为0   </span><span class="token operator">*</span>pi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//pi是int类型，可以操作四个字节，即四字节全赋值为0，结果让n为0   </span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017060.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017060.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907175647456"></p></blockquote><hr><h2 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a><strong>野指针</strong></h2><blockquote><p><strong><code>野指针概念： 野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）</code></strong></p><p><font color=red><strong>野指针的形成原因：</strong></font></p><p><strong>①指针未初始化</strong>  <strong>②指针越界访问</strong>  <strong>③指针指向的空间释放</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//①指针未初始化</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//局部变量指针未初始化，默认为随机值</span>    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//②指针越界访问</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//当指针指向的范围超出数组arr的范围时，p就是野指针</span>            <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//③指针指向的空间释放</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token operator">*</span> a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span>a<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果后续再使用*p就会引发野指针问题，因为p所指向的内存空间已经被free清理了</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>避免野指针的方法：</code></strong></p><ol><li><strong>指针初始化</strong> </li><li><strong>小心指针越界</strong> </li><li><strong>指针指向空间释放时就赋值为NULL</strong> </li><li><strong>避免返回局部变量的地址</strong> </li><li><strong>指针使用之前检查有效性</strong></li></ol></blockquote><hr><h2 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a><strong>指针运算</strong></h2><blockquote><p><strong>指针运算的常见情况：①指针+-整数  ②指针-指针</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//①指针+-整数---分为两种情况：*(p+i)是由首元素地址往后移动i个元素地址；*p+i是*p的元素去加i</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> arr<span class="token punctuation">;</span><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token operator">*</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017014.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017014.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907200531845"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//②指针-指针---前提条件：两个指针指向同一块空间才可以</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017843.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017843.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907200734390"></p><p><strong>补充：<font color=red>允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，但是不允许与指向第一个元素之前的那个内存位置的指针进行比较</font></strong></p></blockquote><h2 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a><strong>指针与数组</strong></h2><blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017425.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017425.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907204347239"></p><p><strong><font color=red>可见数组名和数组首元素的地址是一样的</font></strong></p><p><strong><code>既然可以把数组名当成地址存放到一个指针中，我们使用指针来访问就成为可能</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment">//指针存放数组首元素的地址</span>    <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;arr[%d] = %p   &lt;====> p+%d = %p\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017546.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017546.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907204547485"></p><p><strong><font color=red>结论： p+i 其实计算的是数组 arr 下标为i的地址</font></strong></p></blockquote><hr><h2 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a><strong>二级指针</strong></h2><blockquote><p><strong>指针变量也是变量，是变量就有地址，那指针变量的地址存放在哪里？ —是存在二级指针</strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018158.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018158.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907210332615"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//*ppa通过对ppa中地址进行解引用，这样就找到了pa，*ppa其实访问的就是pa</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>pa<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>ppa<span class="token operator">=</span><span class="token operator">&amp;</span>pa<span class="token punctuation">;</span><span class="token operator">*</span>ppa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//等价于 pa = &amp;a;</span><span class="token comment">//**ppa 先通过 *ppa 找到 pa ,然后对 pa 进行解引用操作： *pa ,找到的是a</span><span class="token operator">*</span><span class="token operator">*</span>ppa<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">//*ppa等价于pa，**ppa等价于*pa，这里就等价于a=30；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a><strong>指针数组</strong></h2><blockquote><p><strong>指针数组是指针还是数组？—<code>是</code>存放指针的<code>数组</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//arr1数组中存放5个int类型元素---整形数组</span><span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//arr2数组存放6个char类型元素---字符数组</span><span class="token keyword">int</span><span class="token operator">*</span> arr3<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//arr3数组存放5个int*类型元素---指针数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018419.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122018419.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907211946934"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言初阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作符</title>
      <link href="/2022/11/08/5.cao-zuo-fu/"/>
      <url>/2022/11/08/5.cao-zuo-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a><strong>操作符</strong></h1><hr><h2 id="源码、补码、反码、移码"><a href="#源码、补码、反码、移码" class="headerlink" title="源码、补码、反码、移码"></a><strong>源码、补码、反码、移码</strong></h2><blockquote><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015053.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015053.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907073716186"></p><p><strong><code>正整数：原码、反码、补码相同</code></strong></p><p><strong><code>负整数：原码、反码、补码不同，要计算</code></strong></p><p><strong><code>整数在内存中存储的是补码</code></strong></p><p><strong><code>移码一般用在浮点数取数大小上，不太重要</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015706.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015706.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907073740211"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015719.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015719.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907073827953"></p></blockquote><hr><h2 id="算数操作符"><a href="#算数操作符" class="headerlink" title="算数操作符"></a><strong>算数操作符</strong></h2><blockquote><p><strong><code>算术操作符：+ - * / %</code></strong></p><p><strong><font color=red>易错重点：</font></strong> </p><p><strong>①：</strong> <strong><code>除了 % 操作符之外，其他的几个操作符可以作用于整数和浮点数</code></strong></p><p><strong>②：</strong> <strong><code>对于 / 操作符如果两个操作数都为整数，执行整数除法。而只要有浮点数执行的就是浮点数除法</code></strong></p><p><strong>③：</strong> <strong><code>% 操作符的两个操作数必须为整数。返回的是整除之后的余数</code></strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d b=%d c=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a+b=%d\n"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a-b=%d\n"</span><span class="token punctuation">,</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a*b=%d\n"</span><span class="token punctuation">,</span> a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a/b=%d\n"</span><span class="token punctuation">,</span> a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b/c=%d\n"</span><span class="token punctuation">,</span> b <span class="token operator">/</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b模c=%d\n"</span><span class="token punctuation">,</span> b<span class="token operator">%</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015081.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015081.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907084300702"></p></blockquote><hr><h2 id="移位操作符"><a href="#移位操作符" class="headerlink" title="移位操作符"></a><strong>移位操作符</strong></h2><blockquote><p><strong>移位操作符分为：左移操作符、右移操作符</strong>—<strong><code>移位操作符没有负数</code></strong></p><p><strong><code>左移操作符 移位规则：左边抛弃、右边补0</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015272.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015272.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907084701766"></p><p><strong><code>右移操作符 移位规则：分为两种（逻辑移位、算术移位）</code></strong>—<strong>默认算术右移</strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015845.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015845.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907084826462"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016620.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016620.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907084914115"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016874.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016874.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907084936961"></p><p><strong><code>二进制、八进制、十六进制可以用移位运算符快速计算</code></strong></p></blockquote><hr><h2 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a><strong>位操作符</strong></h2><blockquote><p><strong><code>0为假，1为真</code></strong></p><p><strong><code>&amp;</code> —按位(二进制)与</strong> —<strong><code>同真为真</code></strong></p><p><strong><code>|</code> —按位(二进制)或</strong> —<strong><code>同假为假</code></strong></p><p><strong><code>^</code> —按位(二进制)异或</strong> —<strong><code>相同为假，相异为真</code></strong></p><p><strong><code>他们的操作数必须是整数</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016433.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016433.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907090015730"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016256.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016256.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907090951023"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016321.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016321.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907091408453"></p><p><strong><code>规则：本身异或两次，值不变</code></strong>—<font color=red><strong>第一次异或，二进制全为0，第二次异或，二进制为本身—同为0，异为1</strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//实际用法：不创建临时变量，实现两数的交换---规则：同一个数相互异或两次，值不变</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d b=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span> b <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span><span class="token comment">//本质：b=a^b^b---b=a^0---b=a</span> a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span><span class="token comment">//本质：a=a^b^a---a=b</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016970.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016970.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907092739758"></p></blockquote><hr><h2 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title="赋值操作符"></a><strong>赋值操作符</strong></h2><blockquote><p><strong>赋值操作符是一个很棒的操作符，他可以让你得到一个你之前不满意的值,也就是你可以给自己重新赋值</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> high <span class="token operator">=</span> <span class="token number">160</span><span class="token punctuation">;</span><span class="token comment">//高度</span>    high <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span><span class="token comment">//不满意就赋值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"high=%d\n"</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    age <span class="token operator">=</span> age2 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">//连续赋值---这种写法不好，一般不这样用</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age=%d\n"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016386.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016386.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907104819478"></p><p><strong><code>赋值运算符中的左值、右值问题：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016803.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016803.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907105042056"></p><p><strong><code>左值：是可以放在等号左边的，一般是一块空间</code></strong>—<strong>左值是空间</strong></p><p><strong><code>右值：是可以放在等号右边的，一般是一个值或者一块空间的内容</code></strong>—<strong>右值是值或空间内容</strong></p><p><font color=red><strong>左右值问题在指针的时候会体现的尤为重要，这也是很多人理解不了链表的删除与插入的问题所在</strong></font></p></blockquote><hr><h2 id="单目、多目操作符"><a href="#单目、多目操作符" class="headerlink" title="单目、多目操作符"></a><strong>单目、多目操作符</strong></h2><blockquote><p><strong><code>单目、多目操作符：有几个操作符就是几目操作符</code></strong>—<strong><code>!</code>只有一个操作符是单目操作符—<code>&amp;</code>有两个操作符是双目操作符—<code>?:</code>有三个操作符是三目操作符</strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016415.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016415.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907114905653"></p></blockquote><hr><h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a><strong>关系操作符</strong></h2><blockquote><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016952.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016952.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907115352762"></p></blockquote><hr><h2 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a><strong>逻辑操作符</strong></h2><blockquote><p><strong><code>逻辑操作符分为：逻辑与、逻辑或</code></strong></p><p><strong><code>&amp;&amp; 逻辑与</code></strong></p><p><strong><code>|| 逻辑或</code></strong></p><p><font color=red><strong>区分&#x3D;&#x3D;逻辑与和按位与&#x3D;&#x3D;：逻辑操作符只关注真假、位操作符关注二进制</strong></font></p><p><strong>1&amp;2—–&gt;0</strong>   <strong>解释：这里是进行1和2二进制的按位与，结果为0</strong></p><p><strong>1&amp;&amp;2—-&gt;1</strong>  <strong>解释：这里非0表示真，逻辑与关注真假，结果为1</strong></p><p><font color=red><strong>区分&#x3D;&#x3D;逻辑或和按位或&#x3D;&#x3D;：逻辑操作符只关注真假、位操作符关注二进制</strong></font></p><p><strong>1|2—–&gt;3</strong> </p><p><strong>1||2—-&gt;1</strong></p><p><font color=green><strong>重点注意：</strong></font></p><p><strong><code>1.&amp;&amp;运算，如果左操作数为假，右边不计算</code></strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>i <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>b <span class="token operator">&amp;&amp;</span> d<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//这里a为0，判断为假，后面代码都不执行了</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d\nb=%d\nc=%d\nd=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016866.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016866.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907140633074"></p><p><strong><code>2.||运算，如果左操作数为真，右边不计算</code></strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>i <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">||</span> <span class="token operator">++</span>b <span class="token operator">||</span> d<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d\nb=%d\nc=%d\nd=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016846.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016846.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907141129196"></p></blockquote><hr><h2 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a><strong>条件操作符</strong></h2><blockquote><p><strong>条件操作符其实就是三目操作符</strong>—<strong><code>exp1 ? exp2 : exp3</code></strong>—<strong>exp1为真，执行exp2，为假，执行exp3</strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a如果大于5，则b=2，否则b=4</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b=%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果输出4</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016671.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016671.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907143152127"></p></blockquote><hr><h2 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a><strong>逗号表达式</strong></h2><blockquote><p><strong><code>逗号表达式，就是用逗号隔开的多个表达式</code></strong></p><p><strong><code>逗号表达式，从左向右依次执行。整个表达式的结果是最后一个表达式的结果</code></strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">,</span> b <span class="token operator">=</span> a <span class="token operator">-</span> c<span class="token punctuation">,</span> c <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最终结果是最后一个表达式的结果---这里a=5，b=-1，c=5-2=3</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"d=%d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016615.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016615.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907143433564"></p></blockquote><hr><h2 id="下标引用、函数调用、结构成员操作符"><a href="#下标引用、函数调用、结构成员操作符" class="headerlink" title="下标引用、函数调用、结构成员操作符"></a><strong>下标引用、函数调用、结构成员操作符</strong></h2><blockquote><p><strong>Ⅰ：下标引用操作符—[]—操作数：一个数组名 + 一个索引值</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建数组</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//实用下标引用操作符。</span><span class="token comment">//[ ]的两个操作数是arr和9。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Ⅱ：函数调用操作符—()—接受一个或者多个操作数：第一个操作数是函数名，剩余的操作数就是传递给函数的参数</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//实用（）作为函数调用操作符</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实用（）作为函数调用操作符</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Ⅲ：访问一个结构的成员</strong>—<strong><code>. 结构体.成员名</code></strong>—<strong><code>-&gt; 结构体指针-&gt;成员名</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token punctuation">&#123;</span> <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token keyword">char</span> sex<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">set_age1</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> stu<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> stu<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">set_age2</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token operator">*</span> pStu<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> pStu<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">//结构成员访问</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">struct</span> <span class="token class-name">Stu</span> stu<span class="token punctuation">;</span> <span class="token keyword">struct</span> <span class="token class-name">Stu</span><span class="token operator">*</span> pStu <span class="token operator">=</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">;</span><span class="token comment">//结构成员访问</span>  stu<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//结构成员访问</span> <span class="token function">set_age1</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>  pStu<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//结构成员访问</span> <span class="token function">set_age2</span><span class="token punctuation">(</span>pStu<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h2 id="表达式求值与算术转换"><a href="#表达式求值与算术转换" class="headerlink" title="表达式求值与算术转换"></a><strong>表达式求值与算术转换</strong></h2><blockquote><p><strong><code>表达式求值的顺序一部分是由操作符的优先级和结合性决定</code></strong></p><p><strong><code>有些表达式的操作数在求值的过程中可能需要转换为其他类型</code></strong></p><p><font color=green><strong>类型转换分为：隐式类型转换(整形提升)、显式类型转换(算术转换)</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016081.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122016081.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907155651162"></p><p><strong>Ⅰ 隐式类型转换：</strong></p><p><strong>C的整型算术运算总是至少以缺省整型类型的精度来进行的，为了获得这个精度，<code>表达式中的字符和短整型操作数在使用之前被转换为普通整型</code>，这种转换称为<code>整型提升</code></strong></p><p><strong><code>整型提升的意义：</code></strong></p><p><strong>表达式的整型运算要在CPU的相应运算器件内执行，CPU内整型运算器(ALU)的操作数的字节长度 一般就是int的字节长度，同时也是CPU的通用寄存器的长度。 因此，即使两个char类型的相加，在CPU执行时实际上也要先转换为CPU内整型操作数的标准长度。 通用CPU（general-purpose CPU）是难以直接实现两个8比特字节直接相加运算（虽然机器指令 中可能有这种字节相加指令）。所以，表达式中各种长度可能小于int长度的整型值，都必须先转换为int或unsigned int，然后才能送入CPU去执行运算</strong>——<strong><font color=red>这里也解释了为什么char底层是int以及char与int的直接转换</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//算的时候先整形提升为int类型，然后发生截断为char类型</span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//0000 0101---原码值：5</span><span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token number">126</span><span class="token punctuation">;</span><span class="token comment">//0111 1110---原码值：126</span><span class="token keyword">char</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token comment">//1000 0011---原码值：131</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c=%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里发生整形提升</span>    <span class="token comment">//过程：1000 0011---c的原码</span>    <span class="token comment">//整形提升为int：1111 1111 1111 1111 1111 1111 1000 0011---c的原码</span>    <span class="token comment">//转化为补码存入内存：1000 0000 0000 0000 0000 0000 0111 1101---c的补码</span>    <span class="token comment">//补码代表的值：-125(0111 1101代表125，首部1代表负数)</span>        <span class="token comment">//溢出计算法：</span>    <span class="token comment">//结果为-125---原因：char范围是-128~127，到了127就从-128开始计算，-128+3=-125</span>    <span class="token comment">//如此计算的原因是：二进制进位按照溢出循环表顺时针走，正数最大走完，理所当然是从负数最大开始</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017462.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017462.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907151501333"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017112.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017112.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907153539570"></p></blockquote><p><font color=green><strong>整形提升的理解：整形提升是按照变量的数据类型的符号位来提升的</strong></font></p><blockquote><p><strong><font color=green>负数的整形提升</font></strong> </p><p><strong><code>char c1 = -1;</code></strong> </p><p><strong>变量c1的二进制位(补码)中只有8个比特位： <code>1111111</code></strong> </p><p><strong>因为 char 为有符号的 char ，所以整形提升的时候，<code>高位补充符号位</code>，即为1</strong> </p><p><strong><code>提升之后的结果是： 11111111111111111111111111111111</code></strong> </p><p><strong><font color=green>正数的整形提升</font></strong> </p><p><strong><code>char c2 = 1;</code></strong> </p><p><strong>变量c2的二进制位(补码)中只有8个比特位： <code>00000001</code></strong> </p><p><strong>因为 char 为有符号的 char，所以整形提升的时候，<code>高位补充符号位</code>，即为0</strong> </p><p><strong><code>提升之后的结果是： 00000000000000000000000000000001</code></strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">0xb6</span><span class="token punctuation">;</span><span class="token keyword">short</span> b <span class="token operator">=</span> <span class="token number">0xb600</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0xb6000000</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0xb6</span><span class="token punctuation">)</span><span class="token comment">//char存不下，发生整形提升，值不一样了</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0xb600</span><span class="token punctuation">)</span><span class="token comment">//short存不下，发生整形提升，值不一样了</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0xb6000000</span><span class="token punctuation">)</span><span class="token comment">//不发生整形提升</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印c</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017004.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017004.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907154342604"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//c只要参与表达式运算,就会发生整形提升,表达式 +c ,就会发生提升，提升为int,所以sizeof(+c) 是4个字节</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">-</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017984.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017984.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907155159882"></p></blockquote><p><font color=red><strong>算术转换：也称为显示类型转换</strong></font></p><blockquote><p><strong>某个操作符的各个操作数属于不同的类型，那么除非其中一个操作数的转换为另一个操作数的类型，否则操作就无法进行。下面的层次体系称为寻常算术转换</strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017877.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017877.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907155826021"></p><p><strong>如果某个操作数的类型在上面这个列表中排名较低，那么首先要转换为另外一个操作数的类型后执行运算</strong></p><p><strong>算术转换要合理，要不然会有一些潜在的问题，比如下面：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token comment">//算术转换，会有精度丢失---float转int</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num=%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017016.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017016.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907160802068"></p></blockquote><hr><h2 id="操作符的三大属性"><a href="#操作符的三大属性" class="headerlink" title="操作符的三大属性"></a><strong>操作符的三大属性</strong></h2><blockquote><p><strong><code>复杂表达式的求值有三个影响的因素：1. 操作符的优先级 2. 操作符的结合性 3. 是否控制求值顺序</code></strong></p><p><strong><code>两个相邻的操作符先执行哪个？取决于他们的优先级---如果两者的优先级相同，取决于他们的结合性</code></strong></p><p><strong>举例：表达式—<code>a*b+c*d+e*f</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017307.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122017307.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907170254540"></p><p><font color=red><strong>总结：</strong></font></p><ol><li><strong>结合方向只有三个是从右往左，其余都是从左往右</strong>—<strong><code>从右往左：单目运算符、三目运算符、=+运算符 的运算符</code></strong></li><li><strong>所有双目运算符中只有赋值运算符的结合方向是从右往左</strong></li><li><strong>另外两个从右往左结合的运算符也很好记，因为它们很特殊：一个是单目运算符，一个是三目运算符</strong></li><li><strong>C语言中有且只有一个三目运算符</strong>—<strong>exp1?exp2:exp3</strong></li><li><strong>逗号运算符的优先级最低，要记住</strong></li><li><strong>此外要记住，对于优先级：<code>算术运算符 &gt; 关系运算符 &gt; 逻辑运算符 &gt; 赋值运算符</code>。<font color=red>逻辑运算符中“逻辑非 !”除外</font></strong></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言初阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2022/11/08/4.shu-zu/"/>
      <url>/2022/11/08/4.shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h1><hr><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a><strong>一维数组</strong></h2><h3 id="一维数组的创建和初始化"><a href="#一维数组的创建和初始化" class="headerlink" title="一维数组的创建和初始化"></a><strong>一维数组的创建和初始化</strong></h3><blockquote><p><strong><code>一维数组的创建</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr3<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">float</span> arr4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> arr5<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//c99标准支持变长数组：[]里可以放常量</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>一维数组的初始化</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//不完全初始化，剩余元素默认初始化为0</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//不给长度初始化</span><span class="token keyword">int</span> arr3<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">4</span>，<span class="token number">5</span><span class="token punctuation">&#125;</span>；<span class="token comment">//完全初始化</span><span class="token keyword">char</span> arr4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//98是字符b的ASCII码</span><span class="token keyword">char</span> arr5<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'b'</span><span class="token punctuation">,</span><span class="token char">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//存储单字符，结尾没有\0---数组大小为3</span><span class="token keyword">char</span> arr6<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token comment">//存储字符串，结尾有\0---数组大小为4---字符串以\0作为结尾标识符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充：<font color=red>strlen是一个库函数—计算字符串的长度，只能针对字符串—关注字符串中是否有\0—有计算出大小，没有给出随机值</font></strong></p><p>&#x3D;&#x3D;<strong>补充：sizeof是一个操作符—计算变量所占空间大小，任何类型都可用—关注空间大小，不在乎存在\0</strong>&#x3D;&#x3D;</p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'b'</span><span class="token punctuation">,</span><span class="token char">'c'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"strlen：%d\n"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果是随机值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof: %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果是所占空间长大小</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014112.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014112.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906231246049"></p></blockquote><hr><h3 id="一维数组的使用"><a href="#一维数组的使用" class="headerlink" title="一维数组的使用"></a><strong>一维数组的使用</strong></h3><blockquote><p><strong><code>数组使用下标来访问元素，下标从0开始</code></strong></p><p><strong><code>数组的大小可以通过计算得到</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//数组不完全初始化</span><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字符串大小计算：4*10/4=10</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment">//也可以用for+scanf获得元素</span>    <span class="token comment">//for(int i=0;i&lt;length;++i)</span>       <span class="token comment">//scanf("%d",&amp;arr[i]);</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014033.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014033.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906232420617"></p></blockquote><hr><h3 id="一维数组在内存中的存储"><a href="#一维数组在内存中的存储" class="headerlink" title="一维数组在内存中的存储"></a><strong>一维数组在内存中的存储</strong></h3><blockquote><p><strong><code>数组在内存中是连续存放的</code></strong>—<strong>随着数组下标的增长，元素的地址，也在有规律的递增(增单个元素大小)</strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014599.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014599.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906232757765"></p><p>举例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;arr[%d] = %p\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014877.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014877.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906232856361"></p></blockquote><hr><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a><strong>二维数组</strong></h2><h3 id="二维数组的创建和初始化"><a href="#二维数组的创建和初始化" class="headerlink" title="二维数组的创建和初始化"></a><strong>二维数组的创建和初始化</strong></h3><blockquote><p><strong><code>二维数组的创建</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//数组创建</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>二维数组的初始化</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//数组初始化</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//没有初始化的的默认为0</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//&#123;&#125;再次进行分组，1 2为arr[0][1] arr[0][2] </span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//二维数组如果有初始化，行可以省略，列不能省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h3 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a><strong>二维数组的使用</strong></h3><blockquote><p><strong>二维数组也使用下标访问元素</strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014365.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014365.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906233910209"></p></blockquote><hr><h3 id="二维数组在内存中的存储"><a href="#二维数组在内存中的存储" class="headerlink" title="二维数组在内存中的存储"></a><strong>二维数组在内存中的存储</strong></h3><blockquote><p><strong><code>二维数组相当于一维数组里放一位数组</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014390.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014390.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906234031005"></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;arr[%d][%d]= %p\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015380.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015380.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906234355072"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015633.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015633.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906234455068"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015150.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015150.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220909130212762"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015843.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015843.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220909144706157"></p></blockquote><hr><h2 id="数组越界"><a href="#数组越界" class="headerlink" title="数组越界"></a><strong>数组越界</strong></h2><blockquote><p><strong><code>数组的下标是有范围的</code></strong>—<font color=blue><strong>数组的下标规定是从0开始的，如果数组有n个元素，最后一个元素的下标就是n-1</strong></font></p><p><strong><code>数组的下标如果小于0，或者大于n-1，就是数组越界访问了，超出了合法的数组空间访问</code></strong></p><p><font color=red><strong>C语言越界检查问题：C语言本身是不做数组下标的越界检查，编译器也不一定报错，但是编译器不报错，并不意味着程序就是正确的，所以写代码时，最好自己做越界的检查</strong></font>—<strong>使用assert断言或者判断数组范围等</strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当i等于10的时候，越界访问了,可能报错可能不报错</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015885.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015885.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906234955860"></p></blockquote><hr><h2 id="数组名"><a href="#数组名" class="headerlink" title="数组名"></a><strong>数组名</strong></h2><blockquote><p><strong><font color=green>通常来说：数组名是首元素地址</font></strong>—<strong><code>存在特殊情况：sizeof(数组名)、&amp;数组名</code></strong></p><p><strong>通常情况举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//首元素地址</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//首元素地址</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015066.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015066.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906235502558"></p><p><strong>特殊情况举例：</strong></p><p><strong><code>sizeof(数组名)：计算整个数组的大小，sizeof放单调数组名，如arr，表示整个数组</code></strong></p><p><strong><code>&amp;数组名：取出的是数组地址，&amp;数组名表示整个数组</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//首元素地址</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组地址---以首元素来表示</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组总大小</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015903.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015903.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907000035371"></p><p><strong><code>补充：sizeof()里的计算式不执行</code></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015723.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015723.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220907160435676"></p></blockquote><hr><h2 id="柔性数组"><a href="#柔性数组" class="headerlink" title="柔性数组"></a><strong>柔性数组</strong></h2><blockquote><p><strong>C99 中，结构体中的最后一个元素允许是未知大小的数组，这就叫做『柔性数组』成员</strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_type</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//柔性数组成员</span><span class="token punctuation">&#125;</span>type_a<span class="token punctuation">;</span><span class="token comment">//有些编译器会报错无法编译可以改成以下形式</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_type</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//柔性数组成员</span><span class="token punctuation">&#125;</span>type_a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>柔性数组特点：</code></strong></p><ol><li><font color=red><strong>结构体中的柔性数组成员前面必须至少一个其他成员</strong></font></li><li><font color=red><strong>sizeof 返回的这种结构大小不包括柔性数组的内存</strong></font></li><li><font color=red><strong>包含柔性数组成员的结构用malloc ()函数进行内存的动态分配，并且分配的内存应该大于结构的大小，以适应柔性数组的预期大小</strong></font></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">st_type</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token comment">//4</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//柔性数组成员</span><span class="token punctuation">&#125;</span>type_a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>type_a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出的是4,不包含柔性数组大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>使用柔性数组的好处：</code></strong></p><ol><li><strong>方便内存释放</strong></li><li><strong>利于提高访问速度</strong></li></ol><p><font color=green><strong>对于方便内存释放的解释：</strong></font></p><ol><li><font color=green><strong>如果我们的代码是在一个给别人用的函数中，你在里面做了二次内存分配，并把整个结构体返回给用户。用户调用free可以释放结构体，但是用户并不知道这个结构体内的成员也需要free，所以你不能指望用户来发现这个事。所以，如果我们把结构体的内存以及其成员要的内存一次性分配好了，并返回给用户一个结构体指针，用户做一次free就可以把所有的内存也给释放掉</strong></font></li></ol><p><font color=green><strong>对于提高访问速度的解释：</strong></font></p><ol><li><font color=green><strong>连续的内存有益于提高访问速度，也有益于减少内存碎片。（其实，我个人觉得也没多高了，反正你跑不了要用做偏移量的加法来寻址）</strong></font></li></ol><p><strong><font color=blue>扩展：第二种柔性数组使用方案：不实用，了解即可</font></strong></p><p><font color=red><strong>缺点：开辟和释放的次数都容易出错—容易形成内存碎片</strong></font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span><span class="token comment">//动态内存开辟函数的头文件</span></span><span class="token keyword">struct</span> <span class="token class-name">s</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">s</span><span class="token operator">*</span> ps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">s</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ps指针动态开辟jie空间</span>ps<span class="token operator">-></span>n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>ps<span class="token operator">-></span>arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//arr指针动态开辟40个空间</span><span class="token comment">//使用功能</span><span class="token comment">//内容不够扩容</span><span class="token function">free</span><span class="token punctuation">(</span>ps<span class="token operator">-></span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token operator">-></span>arr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>ps <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015342.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122015342.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220911141227832"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言初阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数</title>
      <link href="/2022/11/08/3.han-shu/"/>
      <url>/2022/11/08/3.han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h1><hr><h2 id="函数分类"><a href="#函数分类" class="headerlink" title="函数分类"></a><strong>函数分类</strong></h2><p><strong>函数分为库函数和自定义函数</strong></p><p><strong>库函数：就是已经写好封装了，可以直接调用的函数，比如printf等</strong></p><p><strong>自定义函数：就是我们自己写的函数</strong></p><p><strong>库函数学习地址：</strong><img src="/www.cplusplus.com" class="lazyload placeholder" data-srcset="/www.cplusplus.com" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="cplusplus"></p><hr><h2 id="函数的实参与形参"><a href="#函数的实参与形参" class="headerlink" title="函数的实参与形参"></a><strong>函数的实参与形参</strong></h2><h3 id="实际参数与形式参数概念"><a href="#实际参数与形式参数概念" class="headerlink" title="实际参数与形式参数概念"></a><strong>实际参数与形式参数概念</strong></h3><p><font color=red><strong>实际参数(实参)：调用函数传入的变量</strong></font></p><blockquote><p><strong><font color=red>真实传给函数的参数，叫实参</font></strong></p><p><font color=red><strong>实参可以是：常量、变量、表达式、函数等</strong></font></p><p><font color=red><strong>无论实参是何种类型的量，在进行函数调用时，它们都必须有确定的值，以便把这些值传送给形参</strong></font></p></blockquote><p><font color=red><strong>形式参数(形参)：定义函数时的临时变量</strong></font></p><blockquote><p><strong>形式参数是指函数名后括号中的变量，因为形式参数只有在函数被调用的过程中才实例化（分配内存单元），所以叫形式参数</strong></p><p><strong><font color=green>形式参数当函数调用完成之后就自动销毁了。因此形式参数只在函数中有效</font></strong></p></blockquote><blockquote><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//下面代码用来交换两个变量</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> x<span class="token punctuation">;</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span>y <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换两个变量</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换前：a=%d b=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换后：a=%d b=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>结果展示：</code></strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014157.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014157.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906170628751"></p><p><strong><code>为什么这里没有交换成功呢？</code></strong></p><p><img src="/image-20220906171339873.png" class="lazyload placeholder" data-srcset="/image-20220906171339873.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906171339873"></p><p><strong>我们按F10进入调试模式，在调出监视窗口可以看到：</strong><font color=red><strong>变量a和变量b通过了swap()函数交换内容，但是a和b的内容并没有改变</strong></font></p><p><strong>没有交换成功的原因：<font color=red>形参的改变不影响实参</font></strong>—<strong><code>当函数调用的时候，实参传给形参，形参其实就是实参的一份临时拷贝，所以对形参的修改，不会影响实参</code></strong></p></blockquote><hr><h3 id="函数的调用方法"><a href="#函数的调用方法" class="headerlink" title="函数的调用方法"></a><strong>函数的调用方法</strong></h3><p><strong><font color=red>函数的调用分为：传值调用、传址调用</font></strong></p><blockquote><p><strong><code>传值调用：函数的形参和实参分别占有不同内存块，对形参的修改不会影响实参</code></strong></p><p><strong><code>传址调用：传址调用是把函数外部创建变量的内存地址传递给函数参数的一种调用函数的方式---这种传参方式可以让函数和函数外边的变量建立起真正的联系，也就是函数内部可以直接操作函数外部的变量</code></strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment">//使用指针，实现函数传址调用</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> temp<span class="token punctuation">;</span>temp <span class="token operator">=</span> <span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token operator">*</span>x <span class="token operator">=</span> <span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token operator">*</span>y <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//交换两个变量</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换前：a=%d b=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换后：a=%d b=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014732.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014732.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906172513726"></p></blockquote><hr><h2 id="函数的嵌套调用和链式访问"><a href="#函数的嵌套调用和链式访问" class="headerlink" title="函数的嵌套调用和链式访问"></a><strong>函数的嵌套调用和链式访问</strong></h2><h3 id="嵌套调用：函数相互调用"><a href="#嵌套调用：函数相互调用" class="headerlink" title="嵌套调用：函数相互调用"></a><strong>嵌套调用：函数相互调用</strong></h3><blockquote><p><font color=red><strong>嵌套调用：</strong></font><strong>函数和函数之间可以根据实际的需求进行组合的，也就是互相调用的</strong></p><p><strong><code>函数可以嵌套调用，但是不能嵌套定义</code></strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//打印三次hello world</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">three_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">three_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h3 id="链式访问：返回值作参数"><a href="#链式访问：返回值作参数" class="headerlink" title="链式访问：返回值作参数"></a><strong>链式访问：返回值作参数</strong></h3><blockquote><p><font color=red><strong>链式访问：</strong></font><strong>把一个函数的返回值作为另外一个函数的参数把一个函数的返回值作为另外一个函数的参数</strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//结果是啥？</span>    <span class="token comment">//注：printf函数的返回值是打印在屏幕上字符的个数</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014763.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014763.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906173335331"></p><p><font color=red><strong>解释：首先第一个printf读取第二个printf，第二个printf读取第三个printf，到第三个printf先把43打印出来，然后它作为返回值给第二个printf，此时返回43的字符个数，即2，然后把2作为第一个printf的返回值，即1，所以打印出了4321</strong></font></p></blockquote><hr><h2 id="函数的声明与定义"><a href="#函数的声明与定义" class="headerlink" title="函数的声明与定义"></a><strong>函数的声明与定义</strong></h2><p> <strong>函数声明：</strong></p><blockquote><p><strong>告诉编译器有一个函数叫什么，参数是什么，返回类型是什么。但是具体<font color=blue>是不是存在，函数声明决定不了</font></strong> </p><p><strong>函数的声明一般出现在函数的使用之前，要满足<code>先声明后使用</code></strong> </p><p><strong>函数的声明一般要<font color=red>放在头文件中</font></strong></p></blockquote><p><strong>函数定义：</strong></p><blockquote><p><strong>函数的定义是指：<code>函数的具体实现，交待函数的功能实现</code></strong></p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">举例：<span class="token comment">//test.h---头文件里函数声明</span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//test.c---其他文件里函数定义</span><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="函数递归与迭代"><a href="#函数递归与迭代" class="headerlink" title="函数递归与迭代"></a><strong>函数递归与迭代</strong></h2><blockquote><p><strong><code>函数递归含义：</code></strong><code>程序调用自身的编程技巧称为递归（ recursion）</code></p><p><strong>递归的主要思考方式在于：把大事化小—把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解， 递归策略</strong></p><p><strong><font color=red>递归的两个必要条件</font>：①存在限制条件，当满足这个限制条件的时候，递归便不再继续   ②每次递归调用之后越来越接近这个限制条件</strong></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//输出结果：1 2 3 4</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span> <span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//斐波那契函数</span><span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言初阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分支与循环语句</title>
      <link href="/2022/11/08/2.fen-zhi-yu-xun-huan/"/>
      <url>/2022/11/08/2.fen-zhi-yu-xun-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="分支与循环语句"><a href="#分支与循环语句" class="headerlink" title="分支与循环语句"></a><strong>分支与循环语句</strong></h1><hr><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a><strong>分支语句</strong></h2><p><font color=red><strong>分支语句分为两类：if语句、switch语句</strong></font></p><blockquote><p><code>if语句：</code></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122013455.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122013455.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906150027134"></p><p><code>switch语句：</code></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122013735.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122013735.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906150127560"></p></blockquote><hr><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><strong>if语句</strong></h3><p><font color=green><strong>if的常见格式：if、if…else、if…else if…else</strong></font></p><blockquote><p><code>在if语句中，条件成立为真(非0，一般写为1)，条件不成立为假(0)</code></p><p><code>if的匹配：if可以不与else匹配，也可以与其最近的else匹配</code></p><p><code>else的匹配：else是跟它离得最近得if匹配</code></p><p><code>在if条件判断相等时，把常量放在左边，变量放在右边，可以避免==写成=而不报错的问题</code></p><p><strong>举例代码：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span>  <span class="token comment">//vs studio没有c后缀，需要加宏定义来让其判定为c后缀</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//形式一：if</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未成年!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//形式二：if..else</span><span class="token keyword">int</span> age2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>age2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//if不使用&#123;&#125;，只执行if下第一条语句,叫做悬空if、else</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age2 <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未成年!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"成年!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//形式三：if..else if...else</span><span class="token keyword">int</span> age3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>age3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age3 <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未成年!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age3 <span class="token operator">></span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> age3 <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"青年!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"中老年!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>效果展示：</code></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122013450.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122013450.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906152350132"></p></blockquote><hr><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a><strong>switch语句</strong></h3><p><font color=green><strong>switch语句格式：switch…case…default…</strong></font></p><blockquote><p><code>switch对于里面放入的值进行case匹配，从而执行下面的代码</code></p><p><code>case语句必须跟break来结束此次case，否则继续执行下面的case直到遇到break</code></p><p><code>default是当值与case没有匹配结果的时候，使用的默认匹配，可以没有</code></p><p><strong>举例代码：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入星期几：(0-7)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期一!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期二!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期三!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期四!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期五!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//测试无break效果</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期六!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"星期天!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入错误!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>效果展示：</code></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014050.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014050.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906154548795"></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014979.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014979.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906154734785"></p></blockquote><hr><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a><strong>循环语句</strong></h2><h3 id="2-1-while、for、do…while语句"><a href="#2-1-while、for、do…while语句" class="headerlink" title="2.1 while、for、do…while语句"></a><strong>2.1 while、for、do…while语句</strong></h3><p><font color=red><strong>循环语句分为三类：while、for、do…while</strong></font></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014155.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014155.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906155002853"></p><blockquote><p><code>for循环里，第一个参数是初始化部分，第二个参数是条件判断部分，第三个参数是调整部分</code>—<strong>判断条件不给，就不会终止for循环，除非给终止语句</strong></p><p><code>do...while();意思是无论是否满足，先执行一次代码，在判断while里条件，结尾要用;</code></p><p><strong>举例代码：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//while循环打印0-10</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//for循环打印0-10</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>n<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//do...while</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>效果展示：</code></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014555.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014555.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906155631817"></p></blockquote><hr><h3 id="while语句中的continue、break语句"><a href="#while语句中的continue、break语句" class="headerlink" title="while语句中的continue、break语句"></a><strong>while语句中的continue、break语句</strong></h3><blockquote><p><code>continue终止本次循环，后边的代码不会再执行，直接跳转到while语句的判断部分</code></p><p><code>break用于跳出所有循环，直接终止跳出while循环</code></p><p><strong>举例：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//continue终止本次循环</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//解释：当i=5的时候，满足if条件，执行continue终止了本次循环，后面的代码就不执行了，此时i又为5，反复执行if语句的continue从而出现下图中的一个光标不停闪烁，没有停止运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014994.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014994.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906160714434"></p><p><strong><font color=blue>while的特殊输出：以下代码用来输出0-9数字，跳过其他字符</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> ‘<span class="token number">0</span>’ <span class="token operator">||</span> ch <span class="token operator">></span> ‘<span class="token number">9</span>’<span class="token punctuation">)</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>     <span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//break跳出本次循环</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">==</span> a<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//解释：当a一直加到5的时候，满足if条件，break出了while循环，直接跳到了return语句，虽然a=5，但是没有printf不打印5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014997.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211122014997.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20220906160825863"></p></blockquote><hr><h2 id="扩展：goto语句"><a href="#扩展：goto语句" class="headerlink" title="扩展：goto语句"></a><strong>扩展：goto语句</strong></h2><p><strong><code>C语言中提供了可以随意滥用的 goto语句和标记跳转的标号---goto语句的存在没有什么必要，没啥用</code></strong></p><p><strong><font color=red>goto就是你设定一个goto变量名，然后直接跳转到变量名哪里执行：比如下面的代码，执行到goto again时候，就跳转到again：位置又执行下面的代码</font></strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//goto的关机进程</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> input<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"shutdown -s -t 60"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>again<span class="token operator">:</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"电脑将在1分钟内关机，如果输入：我是猪，就取消关机!\n请输入:>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">"我是猪"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"shutdown -a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>   <span class="token punctuation">&#123;</span>        <span class="token keyword">goto</span> again<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言初阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是C语言?</title>
      <link href="/2022/11/08/1.shi-me-shi-c-yu-yan/"/>
      <url>/2022/11/08/1.shi-me-shi-c-yu-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是C语言？"><a href="#什么是C语言？" class="headerlink" title="什么是C语言？"></a><strong>什么是C语言？</strong></h1><hr><h2 id="C语言的起源"><a href="#C语言的起源" class="headerlink" title="C语言的起源"></a><strong>C语言的起源</strong></h2><p><strong>C语言之父是<code>丹尼斯·里奇</code>：<code>丹尼斯·里奇</code>（1941年9月9日-2011年10月12日），C语言之父，UNIX之父。曾担任朗讯科技公司贝尔实验室下属的计算机科学研究中心系统软件研究部的主任一职。1978年与布莱恩·科尔尼干（Brian W. Kernighan）一起出版了名著《C程序设计语言（The C Programming Language）》。此书已翻译成多种语言，被誉为c语 …</strong></p><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211121915539.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211121915539.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><hr><h2 id="C语言的使用领域"><a href="#C语言的使用领域" class="headerlink" title="C语言的使用领域"></a><strong>C语言的使用领域</strong></h2><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211121916049.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211121916049.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><hr><h2 id="为什么要学习C语言"><a href="#为什么要学习C语言" class="headerlink" title="为什么要学习C语言"></a><strong>为什么要学习C语言</strong></h2><p><strong>简单来说C生万物，作为最老的编程语言，现在的大多语言底层实现都是基于C&#x2F;C++的，学明白了C语言可以很快的上手其他语言，从而提高自己的学习效率和遇到问题的解决能力。</strong></p><p><strong>我现在说这些大家还不能好好体会，只有等你写过超过10000行代码开始，你才会能够理解我现在说的，尤其是学习非C&#x2F;C++语言的朋友。</strong></p><hr><h2 id="C语言的学习境界"><a href="#C语言的学习境界" class="headerlink" title="C语言的学习境界"></a><strong>C语言的学习境界</strong></h2><p><img src="https://gitee.com/pure_hearted/blog-bed/raw/master/202211121916577.png" class="lazyload placeholder" data-srcset="https://gitee.com/pure_hearted/blog-bed/raw/master/202211121916577.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp"></p><p><strong>我对于C语言的学习分层了5层：</strong></p><blockquote><p><strong><font color=red>第一层：得其零碎</font>—就是懂了基本的语法，能够勉强写出基本的逻辑，比如能够完成<font color=green>学校的课设</font>，<font color=green>学生管理系统&#x2F;图书管理系统</font></strong></p><p><strong><font color=red>第二层：得其皮毛</font>—就是懂了点内存和指针管理，能够基本使用它们–大部分人大学毕业大概能到达这个层次</strong></p><p><strong><font color=red>第三层：得其实质</font>–就是能够灵活使用指针管理内存，进而与Linux结合使用C—这需要庞大的学习和剖析源码，不停的调试才能达到</strong></p><p><strong><font color=red>第四层：得其精华</font>—就是能出神入化的使用C语言，能够模拟实现和改造底层代码接口，不再受限于C语言提供的接口</strong></p><p><strong><font color=red>第五层：已炼化其精华</font>—就是能够理解和记忆关于C语言早期设计的BUG和解决方案—只有参考白皮书，著作，测试来理解</strong></p><p><strong>说来惭愧，我学习C语言已经3年了，才刚刚到达第三层皮毛，弯弯绕绕的自学C语言，反反复复的汲取书本和实际编写代码的经验，才敢于重新正视自己曾经学习的错误，重写关于C语言学习的博客，希望大家可以点赞关注收藏我，大家一起互相学习</strong></p></blockquote><hr><h2 id="如何学习C语言"><a href="#如何学习C语言" class="headerlink" title="如何学习C语言"></a><strong>如何学习C语言</strong></h2><p><strong>以我个人在学习上犯的错来说：</strong></p><p><strong>首先，你要抛弃学校的C语言课本，就那本谭浩强的红色书—原因：他有营养，但是其中对于知识的阐述过于简单，知识还有很多错误，对于C语言的正确学习存在误导</strong></p><p><strong>其次，你需要去博客园、stack overflows、CSDN去找一些大佬的学习笔记，就找那种看的人最多的，博主等级最高的，这些学习笔记的博客是他对于知识的高度浓缩，可以让你快速的入门C语言，入门C语言只需要7天左右，如果你跟着学校的谭浩强课程来，你入门的时间至少需要2个月，我没有开玩笑，我就是这样懵懵懂懂过来的</strong></p><p><strong>然后，你需要找一些网课，就二倍速看，然后跟着他敲代码(一定要敲代码，不然学不会的)，边看网课，边看书(书籍推荐我放在后面了)，然后标记出哪些才是网课和书都提及的，那些就是这本书的精华，标记它方便后面的复习。</strong></p><p><strong>最后，等网课看完了，代码写完了，就翻开书，认认真真的去剖析书上的知识，然后在去敲代码实现这些知识，你就达到了”学成”的层次了！</strong></p><hr><h2 id="学习C语言的推荐书籍"><a href="#学习C语言的推荐书籍" class="headerlink" title="学习C语言的推荐书籍"></a><strong>学习C语言的推荐书籍</strong></h2><p><strong>C Primer Plus—C语言的全解书籍，偏向于实际代码的解决问题—不适合入门使用，适合学过一段时间C语言用来查漏补缺</strong></p><p><strong>C和指针—重点讲解C语言的核心-指针和内存管理—书虽然很薄，但是都是知识的高度浓缩</strong></p><p><strong>C陷阱与缺陷—重点讲解C语言早期设计的漏洞和BUG—让你对于C语言底层有清晰了解</strong></p><p><strong>C专家编程—重点讲解C语言的语言特性和C语言的编程技巧</strong></p><p><strong>高质量程序设计指南C&#x2F;C++语言—主要讲解C&#x2F;C++代码风格和企业解决方案—适合学习至少超过1年的去看，可以解决你未来企业编程的绝大数问题</strong></p><p><strong>ps：入门直接看网课和博主博客学习笔记，然后再看书，不然你完全看不懂，计算机的书都有难度</strong></p><p><strong><font color=red>博主的话：大家不要指望一年就能学懂C语言，C语言是一个庞大的体系，是需要我们长久的学习的，我学习C语言已经三年了，仍旧觉得自己处在似懂非懂的状态，问底层或者一个编程问题的起因是什么我是不理解的，其实很多人都这样，也正是因为如此才诞生了程序员的35岁危机</font></strong></p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言初阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的简历</title>
      <link href="/2022/11/08/wo-de-jian-li/"/>
      <url>/2022/11/08/wo-de-jian-li/</url>
      
        <content type="html"><![CDATA[<h2 id="C-开发工程师"><a href="#C-开发工程师" class="headerlink" title="C++开发工程师"></a>C++开发工程师</h2><h3 class="bamboo-h " id="个人介绍">个人介绍</h3><br/><div style="display: grid;  grid-template-columns: 50% 50%;  grid-template-rows: 30px 30px;">  <div><strong>本人姓名：牟建波</strong></div>  <div><i class="fa-solid fa-house-chimney"></i><a href="https://gitee.com/pure_hearted/">https://gitee.com/pure_hearted</a></div>  <div><strong>毕业院校：西昌学院</strong></div>  <div><i class="fa-regular fa-envelope"></i> <a href="tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=1353429820">QQ:1353429820@qq.com</a></div>  <div><strong>毕业学历：本科</strong></div>  <div><i class="fa-regular fa-envelope"></i> <a href="tencent://AddContact/?fromId=50&fromSubId=1&subcmd=all&uin=1353429820">电话:17369194568</a></div>  <div><strong>毕业时间：2024年</strong></div>  <div></div>  <div><strong>持有证书：初级见习工程师、中级软件设计师、PAT乙级<strong></div>  <div></div></div><h3 class="bamboo-h " id="掌握技能">掌握技能</h3><br/><h3 id="C-x2F-C"><a href="#C-x2F-C" class="headerlink" title="C&#x2F;C++"></a>C&#x2F;C++</h3><ul><li><strong>熟练掌握C&#x2F;C++，熟练使用C++在Linux和Windows环境下开发</strong></li><li><strong>熟悉类的封装、继承、多态，并能灵活使用</strong></li><li><strong>了解C++动态内存管理，熟悉RAII机制和高并发内存池</strong></li><li><strong>熟悉函数栈帧，了解常见的调用约定(stdcall、thiscall)</strong></li><li><strong>理解程序编译、链接过程，熟悉内存模型与内存对齐原则</strong></li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li><strong>掌握基本数据结构：SeqList、LinkList、Stack、Queue、Binarytree、Heap、HashTable、Bitmap</strong></li><li><strong>掌握常用STL容器结构：string、vector、list、queue、stack、deque、map、set等</strong></li><li><strong>掌握常见排序算法及其思想：BubbleSort、InsertSort、SelectSort、ShellSort、HeapSort、MergeSort等</strong></li><li><strong>熟悉常用查找算法和结构：BinarySearch、Hashsearch、BSTsearch，了解KMP算法</strong></li></ul><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><ul><li><strong>理解OSI七层模型，熟悉TCP&#x2F;IP与TCP&#x2F;UDP模型</strong></li><li><strong>熟悉TCP可靠传输机制，理解TCP和UDP的区别</strong></li><li><strong>掌握socket网络编程，能够写基本的客户端、服务器</strong></li><li><strong>了解HTPP代理服务器的工作原理</strong></li></ul><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul><li><strong>熟练使用Linux开发环境，熟悉常见基本指令</strong></li><li><strong>熟练使用Git基本语法以及版本控制工具</strong></li><li><strong>熟悉进程和线程，掌握基本的多文件、多线程编程</strong></li><li><strong>了解I&#x2F;O复用函数select、poll、epoll之间的区别和联系</strong></li><li><strong>熟悉Linux进程的虚拟地址空间以及进程PCB</strong></li></ul><h3 class="bamboo-h " id="技能水平">技能水平</h3><br/><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-danger"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>C&#x2F;C++</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-info"  style="width: 80%" aria-valuenow="80" aria-valuemin="0" aria-valuemax="100"><p>数据结构</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-success"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>网络协议</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-warning"  style="width: 60%" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"><p>操作系统</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-primary"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>python</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped" style="background-color: #000!important; width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>Java</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped" style="background-color: #2f54eb!important; width: 20%" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100"><p>前端</p></div></div><h3 class="bamboo-h " id="工作经验">工作经验</h3><br/><h3 id="鸿达科技有限公司-（2021-6-2021-9）"><a href="#鸿达科技有限公司-（2021-6-2021-9）" class="headerlink" title="鸿达科技有限公司 （2021.6-2021.9）"></a>鸿达科技有限公司 （2021.6-2021.9）</h3><p><code>脚本开发</code> <code>状态反馈</code><br>后端开发组</p><ul><li><p>负责服务器状态的反馈报告</p></li><li><p>负责网游糊涂三国的自动化脚本开发</p></li></ul><hr>    <h3 id="杭州多益网络-（2022-1-2022-3）"><a href="#杭州多益网络-（2022-1-2022-3）" class="headerlink" title="杭州多益网络 （2022.1-2022.3）"></a>杭州多益网络 （2022.1-2022.3）</h3><p> <code>可视化</code> <code>即时通讯</code><br>后端开发组</p><ul><li><p>KND组内存命中分析</p></li><li><p>神武AI状态机效果实现</p></li></ul><h3 class="bamboo-h " id="项目(面试时补充，以免泄露...)">项目(面试时补充，以免泄露...)</h3><br/><div class="gallery-group-main">      <figure class="gallery-group">  <img class="gallery-group-img" src='https://s3-us-west-1.amazonaws.com/files.delesign/assets/1-support-team.svg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">高并发内存池</div>  <p>这是项目一</p>  <a href='http://www.baidu.com'></a>  </figcaption>  </figure>        <figure class="gallery-group">  <img class="gallery-group-img" src='https://s3-us-west-1.amazonaws.com/files.delesign/assets/Slack-1.svg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">自主实现HTTP</div>  <p>这是项目二</p>  <a href='http://www.baidu.com'></a>  </figcaption>  </figure>        <figure class="gallery-group">  <img class="gallery-group-img" src='https://s3-us-west-1.amazonaws.com/files.delesign/assets/remote-team-1.svg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">个人博客系统</div>  <p>这是项目三</p>  <a href='http://www.baidu.com'></a>  </figcaption>  </figure>        <figure class="gallery-group">  <img class="gallery-group-img" src='https://s3-us-west-1.amazonaws.com/files.delesign/assets/condo.svg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">斑马大陆冒险日记</div>  <p>这是项目四</p>  <a href='http://www.baidu.com'></a>  </figcaption>  </figure>  </div>]]></content>
      
      
      <categories>
          
          <category> 我的简历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的简历 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
